<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>一只小喵喵的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-11-25T02:48:37.266Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>wyy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>json型字符串取值</title>
    <link href="http://yoursite.com/2018/11/25/json%E5%9E%8B%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8F%96%E5%80%BC/"/>
    <id>http://yoursite.com/2018/11/25/json型字符串取值/</id>
    <published>2018-11-25T02:48:07.000Z</published>
    <updated>2018-11-25T02:48:37.266Z</updated>
    
    <content type="html"><![CDATA[<h2 id="json型字符串取值"><a href="#json型字符串取值" class="headerlink" title="json型字符串取值"></a>json型字符串取值</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">        JSONObject object = JSON.parseObject(msg);</span><br><span class="line">        String resultMsg = object.getString(<span class="string">"data"</span>);</span><br><span class="line">        <span class="keyword">return</span> resultMsg;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;json型字符串取值&quot;&gt;&lt;a href=&quot;#json型字符串取值&quot; class=&quot;headerlink&quot; title=&quot;json型字符串取值&quot;&gt;&lt;/a&gt;json型字符串取值&lt;/h2&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>工具类HttpClientUtil</title>
    <link href="http://yoursite.com/2018/11/25/%E5%B7%A5%E5%85%B7%E7%B1%BBHttpClientUtil/"/>
    <id>http://yoursite.com/2018/11/25/工具类HttpClientUtil/</id>
    <published>2018-11-25T02:45:47.000Z</published>
    <updated>2018-11-25T02:47:32.557Z</updated>
    
    <content type="html"><![CDATA[<h2 id="HttpClientUtil"><a href="#HttpClientUtil" class="headerlink" title="HttpClientUtil"></a>HttpClientUtil</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.jinbei.common.util;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.apache.http.NameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.ClientProtocolException;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.entity.UrlEncodedFormEntity;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.CloseableHttpResponse;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpGet;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.methods.HttpPost;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.client.utils.URIBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.CloseableHttpClient;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.impl.client.HttpClientBuilder;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.message.BasicNameValuePair;</span><br><span class="line"><span class="keyword">import</span> org.apache.http.util.EntityUtils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URISyntaxException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Map;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: UnifiedBgManage</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: HttpClient工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WYuyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-22 13:18</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HttpClientUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CloseableHttpClient client = HttpClientBuilder.create().build();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url, Map&lt;String, String&gt; param,Map&lt;String,String&gt; headers)</span> </span>&#123;</span><br><span class="line">        String resultString = <span class="string">""</span>;</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            URIBuilder uri = <span class="keyword">new</span> URIBuilder(url);</span><br><span class="line">                <span class="keyword">if</span> (param != <span class="keyword">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">for</span> (String key : param.keySet()) &#123;</span><br><span class="line">                        uri.addParameter(key, param.get(key));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            HttpGet get = <span class="keyword">new</span> HttpGet(uri.build());</span><br><span class="line">                <span class="keyword">if</span> (headers != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    <span class="keyword">for</span> (String key :headers.keySet()) &#123;</span><br><span class="line">                        get.setHeader(key,headers.get(key));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                response = client.execute(get);</span><br><span class="line"></span><br><span class="line">                <span class="keyword">if</span> (response.getStatusLine().getStatusCode() == <span class="number">200</span>)&#123;</span><br><span class="line">                    resultString = EntityUtils.toString(response.getEntity(), <span class="string">"UTF-8"</span>);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125; <span class="keyword">catch</span> (URISyntaxException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (response != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    response.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doGet</span><span class="params">(String url, Map&lt;String, String&gt; param)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doGet(url,param,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url, Map&lt;String, String&gt; param,Map&lt;String,String&gt; headers)</span></span>&#123;</span><br><span class="line">        String resultString = <span class="string">""</span>;</span><br><span class="line">        CloseableHttpResponse response = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            HttpPost httpPost = <span class="keyword">new</span> HttpPost(url);</span><br><span class="line">            <span class="keyword">if</span> (param != <span class="keyword">null</span>)&#123;</span><br><span class="line">                List&lt;NameValuePair&gt; paramList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">                <span class="keyword">for</span> (String key : param.keySet()) &#123;</span><br><span class="line">                    paramList.add(<span class="keyword">new</span> BasicNameValuePair(key, param.get(key)));</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// 模拟表单</span></span><br><span class="line">                UrlEncodedFormEntity entity = <span class="keyword">new</span> UrlEncodedFormEntity(paramList,<span class="string">"utf-8"</span>);</span><br><span class="line">                httpPost.setEntity(entity);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span> (headers != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="keyword">for</span> (String key :headers.keySet()) &#123;</span><br><span class="line">                    httpPost.setHeader(key,headers.get(key));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            response = client.execute(httpPost);</span><br><span class="line">            resultString = EntityUtils.toString(response.getEntity(),<span class="string">"UTF-8"</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClientProtocolException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                response.close();</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> resultString;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url, Map&lt;String, String&gt; param)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(url,param,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">doPost</span><span class="params">(String url)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> doPost(url,<span class="keyword">null</span>,<span class="keyword">null</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最好使用doPost，doGet不太安全</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;HttpClientUtil&quot;&gt;&lt;a href=&quot;#HttpClientUtil&quot; class=&quot;headerlink&quot; title=&quot;HttpClientUtil&quot;&gt;&lt;/a&gt;HttpClientUtil&lt;/h2&gt;&lt;figure class=&quot;highlight 
      
    
    </summary>
    
    
      <category term="java" scheme="http://yoursite.com/tags/java/"/>
    
  </entry>
  
  <entry>
    <title>@Transactional</title>
    <link href="http://yoursite.com/2018/11/25/Transactional/"/>
    <id>http://yoursite.com/2018/11/25/Transactional/</id>
    <published>2018-11-25T02:43:24.000Z</published>
    <updated>2018-11-25T02:45:08.865Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Transactional"><a href="#Transactional" class="headerlink" title="@Transactional"></a>@Transactional</h2><p>标注在方法上可以实现一个事务</p><p>Spring事务管理有编程式和声明式两种，前者通过编码方式，后者基于AOP，代码逻辑不受污染，使用的也较多。声明式事务有两种实现方式，一种是在xml里做相关声明，另一种就是用@Transactional。</p><p>但使用时，若在同一个类中，若其中的方法1调用了方法2，且两者都被标注了@Transactional则只被看成一个事务，方法2不会被Spring的事务拦截器拦截，解决方法可以分两个类写或者用AspectJ取代AOP，但我没有做验证。</p><p>另外该注解可以有属性值</p><p><strong>value/transactionManager</strong></p><p>这两个是一个意思，指定事务的名字</p><p><strong>propagation</strong></p><p>可选的值有：</p><p>Propagation.REQUIRED</p><p>如果当前存在事务，则加入该事务，如果当前不存在事务，则创建一个新的事务。</p><p>Propagation.SUPPORTS</p><p>如果当前存在事务，则加入该事务；如果当前不存在事务，则以非事务的方式继续运行。</p><p>Propagation.MANDATORY</p><p>如果当前存在事务，则加入该事务；如果当前不存在事务，则抛出异常。</p><p>Propagation.REQUIRES_NEW</p><p>重新创建一个新的事务，如果当前存在事务，暂停当前的事务。</p><p>Propagation.NOT_SUPPORTED</p><p>以非事务的方式运行，如果当前存在事务，暂停当前的事务。</p><p>Propagation.NEVER</p><p>以非事务的方式运行，如果当前存在事务，则抛出异常。</p><p>Propagation.NESTED</p><p>和 Propagation.REQUIRED 效果一样。</p><p><strong>isolation</strong></p><p>事务的隔离级别</p><p>还有一些感觉不太会用到吧不多啰嗦了用到再查</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Transactional&quot;&gt;&lt;a href=&quot;#Transactional&quot; class=&quot;headerlink&quot; title=&quot;@Transactional&quot;&gt;&lt;/a&gt;@Transactional&lt;/h2&gt;&lt;p&gt;标注在方法上可以实现一个事务&lt;/p&gt;
&lt;p&gt;Sp
      
    
    </summary>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
  </entry>
  
  <entry>
    <title>Dubbo入门</title>
    <link href="http://yoursite.com/2018/11/25/Dubbo%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/11/25/Dubbo入门/</id>
    <published>2018-11-25T02:41:53.000Z</published>
    <updated>2018-11-25T02:42:55.928Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Dubbo是什么"><a href="#Dubbo是什么" class="headerlink" title="Dubbo是什么"></a>Dubbo是什么</h2><p>Dubbo是：</p><ul><li>一款分布式服务框架</li><li>高性能和透明化的RPC远程服务调用方案</li><li>SOA服务治理方案</li></ul><h2 id="Dubbo角色说明"><a href="#Dubbo角色说明" class="headerlink" title="Dubbo角色说明"></a>Dubbo角色说明</h2><p><strong>Provider</strong>: 暴露服务的服务提供方。<br><strong>Consumer</strong>: 调用远程服务的服务消费方。<br><strong>Registry</strong>: 服务注册与发现的注册中心。<br><strong>Monitor</strong>: 统计服务的调用次数和调用时间的监控中心。</p><h2 id="Dubbo注册中心"><a href="#Dubbo注册中心" class="headerlink" title="Dubbo注册中心"></a>Dubbo注册中心</h2><p>你可能兼备服务方与消费方，通过将服务统一管理，来有效的优化对服务发布/使用的流程，<strong>Dubbo提供的注册中心有如下几种类型可供选择</strong>：</p><ul><li>Multicast注册中心</li><li>Zookeeper注册中心</li><li>Redis注册中心</li><li>Simple注册中心</li></ul><h2 id="Dubbo优缺点"><a href="#Dubbo优缺点" class="headerlink" title="Dubbo优缺点"></a>Dubbo优缺点</h2><p>优点：</p><p>1.透明化的远程方法调用 </p><p>​    像调用本地方法一样调用远程方法；只需简单配置，没有任何API侵入。</p><p>2.软负载均衡及容错机制<br>​    可在内网替代nginx lvs等硬件负载均衡器。</p><p>3.服务注册中心自动注册 &amp; 配置管理<br>​    不需要写死服务提供者地址，注册中心基于接口名自动查询提供者ip。<br>​    使用类似zookeeper等分布式协调服务作为服务注册中心，可以将绝大部分项        目配置移入zookeeper集群。</p><p>4.服务接口监控与治理<br>​    Dubbo-admin与Dubbo-monitor提供了完善的服务接口管理与监控功能，针对不同应用的不同接口，可以进行 多版本，多协议，多注册中心管理。</p><p>缺点：</p><p>只支持JAVA语言</p><h2 id="Demo-Zookeeper"><a href="#Demo-Zookeeper" class="headerlink" title="Demo-Zookeeper"></a>Demo-Zookeeper</h2><p><a href="https://blog.csdn.net/hellozpc/article/details/78575773" target="_blank" rel="noopener">https://blog.csdn.net/hellozpc/article/details/78575773</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Dubbo是什么&quot;&gt;&lt;a href=&quot;#Dubbo是什么&quot; class=&quot;headerlink&quot; title=&quot;Dubbo是什么&quot;&gt;&lt;/a&gt;Dubbo是什么&lt;/h2&gt;&lt;p&gt;Dubbo是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;一款分布式服务框架&lt;/li&gt;
&lt;li&gt;高性能和透明
      
    
    </summary>
    
    
      <category term="Dubbo" scheme="http://yoursite.com/tags/Dubbo/"/>
    
  </entry>
  
  <entry>
    <title>ehcache</title>
    <link href="http://yoursite.com/2018/11/04/ehcache/"/>
    <id>http://yoursite.com/2018/11/04/ehcache/</id>
    <published>2018-11-04T09:09:42.000Z</published>
    <updated>2018-11-04T09:16:11.908Z</updated>
    
    <content type="html"><![CDATA[<p>参考链接：<a href="https://blog.csdn.net/vbirdbest/article/details/72763048" target="_blank" rel="noopener">https://blog.csdn.net/vbirdbest/article/details/72763048</a></p><h4 id="ehcache与redis比较"><a href="#ehcache与redis比较" class="headerlink" title="ehcache与redis比较"></a>ehcache与redis比较</h4><ul><li>ehcache通常和redis一块使用</li><li>ehcache直接在jvm虚拟机中缓存，速度快，效率高；但是缓存共享麻烦，集群分布式应用不方便。</li><li>redis是通过socket访问到缓存服务，效率比ecache低，比数据库要快很多， 处理集群和分布式缓存方便，有成熟的方案。如果是单个应用或者对缓存访问要求很高的应用，用ehcache。如果是大型系统，存在缓存共享、分布式部署、缓存内容很大的，建议用redis。</li></ul><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><p>1.pom.xml</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--EhCache--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>net.sf.ehcache<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>ehcache<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>2.增加配置，可以再resource文件夹下增加</p><p>默认情况下Ehcache会自动加载classpath根目录下名为ehcache.xml文件，也可以将该文件放到其他地方在使用时指定文件的位置</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="php"><span class="meta">&lt;?</span>xml version=<span class="string">"1.0"</span> encoding=<span class="string">"UTF-8"</span><span class="meta">?&gt;</span></span></span><br><span class="line"><span class="tag">&lt;<span class="name">ehcache</span> <span class="attr">xmlns:xsi</span>=<span class="string">"http://www.w3.org/2001/XMLSchema-instance"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">xsi:noNamespaceSchemaLocation</span>=<span class="string">"http://ehcache.org/ehcache.xsd"</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 磁盘缓存位置 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">diskStore</span> <span class="attr">path</span>=<span class="string">"java.io.tmpdir/ehcache"</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- 默认缓存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">defaultCache</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxEntriesLocalHeap</span>=<span class="string">"10000"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">timeToIdleSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">timeToLiveSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">maxEntriesLocalDisk</span>=<span class="string">"10000000"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">diskExpiryThreadIntervalSeconds</span>=<span class="string">"120"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">persistence</span> <span class="attr">strategy</span>=<span class="string">"localTempSwap"</span>/&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">defaultCache</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!-- helloworld缓存 --&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">cache</span> <span class="attr">name</span>=<span class="string">"HelloWorldCache"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">maxElementsInMemory</span>=<span class="string">"1000"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">eternal</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">timeToIdleSeconds</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">timeToLiveSeconds</span>=<span class="string">"5"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">overflowToDisk</span>=<span class="string">"false"</span></span></span><br><span class="line"><span class="tag">         <span class="attr">memoryStoreEvictionPolicy</span>=<span class="string">"LRU"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ehcache</span>&gt;</span></span><br></pre></td></tr></table></figure><p>也可以直接写在文件里，Ehcacheconfig.java:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EhCacheConfig</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span>(name = <span class="string">"ehCacheManager"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> CacheManager <span class="title">cacheManager</span><span class="params">()</span></span>&#123;</span><br><span class="line">        CacheConfiguration cacheConfig = <span class="keyword">new</span> CacheConfiguration();</span><br><span class="line">        cacheConfig.setName(<span class="string">"course"</span>);</span><br><span class="line">        cacheConfig.setMemoryStoreEvictionPolicy(<span class="string">"LRU"</span>);</span><br><span class="line">        cacheConfig.setMaxEntriesLocalHeap(<span class="number">1000</span>);</span><br><span class="line">        cacheConfig.setEternal(<span class="keyword">true</span>);</span><br><span class="line">        net.sf.ehcache.config.Configuration config = <span class="keyword">new</span> net.sf.ehcache.config.Configuration();</span><br><span class="line">        config.addCache(cacheConfig);</span><br><span class="line">        CacheManager cacheManager = CacheManager.newInstance(config);</span><br><span class="line">        <span class="keyword">return</span> cacheManager;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>3.这里对cache做简单的封装：</p><p>先对Cache api做下了解，</p><table><thead><tr><th>方法</th><th>解释</th></tr></thead><tbody><tr><td>add(request)</td><td>添加一个请求到缓存</td></tr><tr><td>addAll(List requesets)</td><td>添加一系列请求到缓存</td></tr><tr><td>delete(request,[oprions])</td><td>options可选择如何处理匹配的缓存，有ignoreSearch、ignoreMethod、ignoreVary</td></tr><tr><td>keys(request,[options])</td><td>参数和delete一样，该方法返回一个Promise，即一个Cache键的数组</td></tr><tr><td>match(request,[options])</td><td>request为想要在cache中查找的Promise对象</td></tr><tr><td>matchAll(List requests,[options])</td><td>同上</td></tr><tr><td>put(request,response)</td><td>允许将键值对存到当前缓存</td></tr></tbody></table><hr><p>工具类-EhCacheService</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">EhCacheService</span> </span>&#123;</span><br><span class="line"><span class="comment">//创建缓存管理器</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> CacheManager cacheManager = EhCacheConfig.cacheManager();</span><br><span class="line"><span class="comment">//缓存对象</span></span><br><span class="line">    <span class="keyword">private</span> Cache cache;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">EhCacheService</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.cache = cacheManager.getCache(<span class="string">"course"</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>   获取 ehCache value</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Object <span class="title">getCache</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="comment">//获取cache中的元素</span></span><br><span class="line">        Element element = cache.get(key);</span><br><span class="line">        <span class="keyword">if</span>(element == <span class="keyword">null</span>)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        Object object = element.getObjectValue();</span><br><span class="line">        <span class="comment">//转成jsonObject，json-&gt;value,result-&gt;key&amp;value(json)</span></span><br><span class="line">        JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">        JSONObject json = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(object != <span class="keyword">null</span>)&#123;</span><br><span class="line">            json = JSONObject.parseObject(object.toString());</span><br><span class="line">            result.put(Contants.TYPE,key);</span><br><span class="line">            result.put(Contants.DATA,json);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>   添加 chCache</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> data</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCache</span><span class="params">(String key,String data)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        Element element = <span class="keyword">new</span> Element(key,data);</span><br><span class="line">        cache.put(element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>   获取cache中所有的value</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Object&gt; <span class="title">getCacheAll</span><span class="params">()</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        List&lt;Object&gt; list = <span class="keyword">new</span> ArrayList&lt;Object&gt;();</span><br><span class="line">        List&lt;String&gt; keys = cache.getKeys();</span><br><span class="line">        Map&lt;Object, Element&gt; elements = cache.getAll(keys);</span><br><span class="line">        <span class="keyword">for</span> (String key: keys) &#123;</span><br><span class="line">            Element element = elements.get(key);</span><br><span class="line">            JSONObject result = <span class="keyword">new</span> JSONObject();</span><br><span class="line">            <span class="keyword">if</span>(element != <span class="keyword">null</span>)&#123;</span><br><span class="line">                Object object = element.getObjectValue();</span><br><span class="line">                <span class="keyword">if</span>(object != <span class="keyword">null</span>)&#123;</span><br><span class="line">                    JSONObject json = JSONObject.parseObject(object.toString());</span><br><span class="line">                    result.put(Contants.TYPE,key);</span><br><span class="line">                    result.put(Contants.DATA,json);</span><br><span class="line">                    list.add(result);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>   删除缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> key</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">removeCache</span><span class="params">(String key)</span> <span class="keyword">throws</span> Exception</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> cache.remove(key);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@Description</span>   批量添加缓存</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> elements</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addCacheList</span><span class="params">(List&lt;Element&gt; elements)</span></span>&#123;</span><br><span class="line">        cache.putAll(elements);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>使用：</p><p>这里拿一个现成的redisConsumer的例子来使用ehcache</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * activemq 消费者</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ActiveMqConsumer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    Logger logger = LoggerFactory.getLogger(ActiveMqConsumer.class);</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> EhCacheService ehCacheService;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Sub</span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;activemq.topic&#125;"</span> , containerFactory = <span class="string">"topicListenerFactory"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">subscribe</span><span class="params">(TextMessage text)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            logger.info(<span class="string">"subscribe : "</span>+ text.getText());</span><br><span class="line">            <span class="keyword">if</span>(text != <span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//只获取其中的type、data和操作符command</span></span><br><span class="line">                JSONObject json = JSONObject.parseObject(text.getText());</span><br><span class="line">                String key = json.getString(Contants.TYPE);</span><br><span class="line">                String data = json.getString(Contants.DATA);</span><br><span class="line">                String command = json.getString(Contants.COMMAND);</span><br><span class="line">                <span class="keyword">switch</span> (command)&#123;</span><br><span class="line">                    <span class="keyword">case</span> Contants.ADD:</span><br><span class="line">                        <span class="comment">//将消息数据存入ehcache</span></span><br><span class="line">                        ehCacheService.addCache(key,data);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Contants.UPDATE:</span><br><span class="line">                        ehCacheService.addCache(key,data);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">case</span> Contants.DELETE:</span><br><span class="line">                        ehCacheService.removeCache(key);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    <span class="keyword">default</span>:</span><br><span class="line">                        logger.info(<span class="string">"method is not found ..... command:"</span>+command);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            logger.error(<span class="string">"JSM订阅解析异常!  :"</span>,e.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;参考链接：&lt;a href=&quot;https://blog.csdn.net/vbirdbest/article/details/72763048&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/vbirdbest/ar
      
    
    </summary>
    
    
      <category term="ehcache" scheme="http://yoursite.com/tags/ehcache/"/>
    
      <category term="spring" scheme="http://yoursite.com/tags/spring/"/>
    
  </entry>
  
  <entry>
    <title>redis入门与springboot集成</title>
    <link href="http://yoursite.com/2018/11/04/redis%E5%85%A5%E9%97%A8%E4%B8%8Espringboot%E9%9B%86%E6%88%90/"/>
    <id>http://yoursite.com/2018/11/04/redis入门与springboot集成/</id>
    <published>2018-11-04T09:07:58.000Z</published>
    <updated>2018-11-04T09:21:41.726Z</updated>
    
    <content type="html"><![CDATA[<p>安装与客户端的使用：<a href="https://blog.csdn.net/qq_35038153/article/details/79675728" target="_blank" rel="noopener">https://blog.csdn.net/qq_35038153/article/details/79675728</a></p><p>其他参考链接：<a href="https://www.jianshu.com/p/7bf5dc61ca06/" target="_blank" rel="noopener">https://www.jianshu.com/p/7bf5dc61ca06/</a></p><p><a href="https://blog.csdn.net/w501631338/article/details/73555908" target="_blank" rel="noopener">https://blog.csdn.net/w501631338/article/details/73555908</a></p><p>Redis五大类型:字符串（String）、哈希/散列/字典（Hash）、列表（List）、集合（Set）、有序集合（sorted set）</p><table><thead><tr><th>结构类型</th><th>结构存储的值</th><th>结构的读写能力</th></tr></thead><tbody><tr><td>String</td><td>可以是字符串、整数或者浮点数</td><td>对整个字符串或者字符串的其中一部分执行操作；对象和浮点数执行自增(increment)或者自减(decrement)</td></tr><tr><td>List</td><td>一个链表，链表上的每个节点都包含了一个字符串</td><td>从链表的两端推入或者弹出元素；根据偏移量对链表进行修剪(trim)；读取单个或者多个元素；根据值来查找或者移除元素</td></tr><tr><td>Set</td><td>包含字符串的无序收集器(unorderedcollection)，并且被包含的每个字符串都是独一无二的、各不相同</td><td>添加、获取、移除单个元素；检查一个元素是否存在于某个集合中；计算交集、并集、差集；从集合里卖弄随机获取元素</td></tr><tr><td>Hash</td><td>包含键值对的无序散列表</td><td>添加、获取、移除单个键值对；获取所有键值对</td></tr><tr><td>Zset(有序的Set)</td><td>字符串成员(member)与浮点数分值(score)之间的有序映射，元素的排列顺序由分值的大小决定</td><td>添加、获取、删除单个元素；根据分值范围(range)或者成员来获取元素</td></tr></tbody></table><p><strong>其中String和Hash用的较多。</strong><a href="http://www.runoob.com/redis/redis-commands.html" target="_blank" rel="noopener">redis api命令</a></p><p>Spring 封装了<strong>RedisTemplate</strong>来进行对redis的各种操作，支持所有redis原生的api</p><h4 id="redisTemplate"><a href="#redisTemplate" class="headerlink" title="redisTemplate"></a>redisTemplate</h4><p>Controller:@Resource RedisTemplate&lt;String, String&gt; redisTemplate;</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue();<span class="comment">//操作字符串</span></span><br><span class="line">redisTemplate.opsForHash();<span class="comment">//操作hash</span></span><br><span class="line">redisTemplate.opsForList();<span class="comment">//操作list</span></span><br><span class="line">redisTemplate.opsForSet();<span class="comment">//操作set</span></span><br><span class="line">redisTemplate.opsForZSet();<span class="comment">//操作有序set</span></span><br><span class="line"><span class="comment">//redisTemplate的超时设置</span></span><br><span class="line">redisTemplate.expire((key,timeout,timeunit)<span class="comment">//timeout:key的生存时间，timeunit：时间单位（小时，分钟，秒…)(TimeUnit.SECONDS)</span></span><br><span class="line">redisTemplate.getExpire(key, [timeunit])<span class="comment">//获得超时时间</span></span><br><span class="line"><span class="comment">//注意：以上设置超时的方法只适用于key对应的值不再更新的问题，set方法会丢失key的生存时间，忽略而变为永久。</span></span><br><span class="line">redisTemplate.delete(key)<span class="comment">//redis的String删除操作</span></span><br><span class="line">redisTemplate.set(key,value,[timeout],[timeunit])<span class="comment">//redis的String添加操作，但不推荐，最好结合opsForValue()对字符串操作</span></span><br></pre></td></tr></table></figure><p><strong>注意：如果使用RedisTemplate需要更改序列化方式</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">RedisSerializer&lt;String&gt; stringSerializer = <span class="keyword">new</span> StringRedisSerializer();</span><br><span class="line">        template.setKeySerializer(stringSerializer );</span><br><span class="line">        template.setValueSerializer(stringSerializer );</span><br><span class="line">        template.setHashKeySerializer(stringSerializer );</span><br><span class="line">        template.setHashValueSerializer(stringSerializer );</span><br></pre></td></tr></table></figure><h4 id="StringRedisTemplate（Redis的String数据结构）"><a href="#StringRedisTemplate（Redis的String数据结构）" class="headerlink" title="StringRedisTemplate（Redis的String数据结构）"></a>StringRedisTemplate（Redis的String数据结构）</h4><p>StringRedisTemplate（推荐使用）与RedisTemplate的区别：</p><ul><li><p>StringRedisTemplate继承RedisTemplate</p></li><li><p>两者数据不可通，可以看做两种数据类型</p></li><li><p>SDR默认采用的序列化策略有两种，一种是String的序列化策略，一种是JDK的序列化策略。</p><p>StringRedisTemplate默认采用的是String的序列化策略，保存的key和value都是采用此策略序列化保存的。</p><p>RedisTemplate默认采用的是JDK的序列化策略，保存的key和value都是采用此策略序列化保存的。</p></li></ul><h4 id="String"><a href="#String" class="headerlink" title="String"></a>String</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">String:</span><br><span class="line"><span class="number">1</span>.redisTemplate.opsForValue().set(key,value)); </span><br><span class="line"><span class="number">2</span>.redisTemplate.opsForValue().get(key)); </span><br><span class="line"><span class="number">3</span>.redisTemplate.opsForValue().get(key, start, end);</span><br><span class="line"><span class="number">4</span>.redisTemplate.opsForValue().getAndSet(key, value);</span><br><span class="line"><span class="number">5</span>.redisTemplate.opsForValue().getBit(key, offset);</span><br><span class="line"><span class="number">6</span>.redisTemplate.opsForValue().multiGet(keys);</span><br><span class="line"><span class="number">7</span>.redisTemplate.opsForValue().setBit(key, offset, value);<span class="comment">//通过ascii码设置String</span></span><br><span class="line"><span class="number">8</span>.redisTemplate.opsForValue().set(K key, V value, <span class="keyword">long</span> timeout, TimeUnit unit);<span class="comment">//详见下</span></span><br><span class="line"><span class="number">9</span>.redisTemplate.opsForValue().setIfAbsent(key, value);<span class="comment">//详见下</span></span><br><span class="line"><span class="number">10</span>.redisTemplate.opsForValue().set(K key, V value, <span class="keyword">long</span> offset);<span class="comment">//详见下</span></span><br><span class="line"><span class="number">11</span>.redisTemplate.opsForValue().size(key));</span><br><span class="line"><span class="number">12</span>.redisTemplate.opsForValue().multiGet(Collection&lt;K&gt; keys);</span><br><span class="line"><span class="number">13</span>.redisTemplate.opsForValue().multiSetIfAbsent(Map&lt;? extends K, ? extends V&gt; m);</span><br><span class="line"><span class="number">14</span>.同<span class="number">8</span></span><br><span class="line"><span class="number">15</span>\<span class="number">16</span>\<span class="number">17</span>\<span class="number">18</span>\<span class="number">19</span>.redisTemplate.opsForValue().increment(K key, <span class="keyword">long</span> delta);或.increment(K key, <span class="keyword">double</span> delta);</span><br><span class="line"><span class="number">20</span>.redisTemplate.opsForValue().append(key, value);<span class="comment">//在key键对应值的右面追加值value</span></span><br><span class="line"><span class="number">21</span>.redisTemplate.opsForValue().getOperations().delete(key);<span class="comment">//删除</span></span><br></pre></td></tr></table></figure><ul><li>8.redisTemplate.opsForValue().set(K key, V value, long timeout, TimeUnit unit);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"name"</span>,<span class="string">"tom"</span>,<span class="number">10</span>, TimeUnit.SECONDS); </span><br><span class="line">结果：redisTemplate.opsForValue().get(<span class="string">"name"</span>)<span class="comment">//由于设置的是10秒失效，十秒之内查询有结果，十秒之后返回为null</span></span><br></pre></td></tr></table></figure><ul><li>9.redisTemplate.opsForValue().setIfAbsent(key, value);</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：System.out.println(redisTemplate.opsForValue().setIfAbsent(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>));<span class="comment">//false  multi1之前已经存在</span></span><br><span class="line">       System.out.println(redisTemplate.opsForValue().setIfAbsent(<span class="string">"multi111"</span>,<span class="string">"multi111"</span>));<span class="comment">//true  multi111之前不存在</span></span><br><span class="line">结果：<span class="keyword">false</span></span><br><span class="line"><span class="keyword">true</span></span><br></pre></td></tr></table></figure><ul><li><p>10.redisTemplate.opsForValue().set(K key, V value, long offset);</p><p>该方法是用 value 参数覆写(overwrite)给定 key 所储存的字符串值，从偏移量 offset 开始</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用：redisTemplate.opsForValue().set(<span class="string">"key"</span>,<span class="string">"hello world"</span>);</span><br><span class="line">redisTemplate.opsForValue().set(<span class="string">"key"</span>,<span class="string">"redis"</span>, <span class="number">6</span>);</span><br><span class="line">        System.out.println(<span class="string">"********"</span>+redisTemplate.opsForValue().get(<span class="string">"key"</span>));</span><br><span class="line">结果：********hello redis</span><br></pre></td></tr></table></figure><ul><li>6.redisTemplate.opsForValue().multiGet(keys);</li><li>12.redisTemplate.opsForValue().multiGet(Collection<k> keys);</k></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">使用：Map&lt;String,String&gt; maps = <span class="keyword">new</span> HashMap&lt;String, String&gt;();</span><br><span class="line">        maps.put(<span class="string">"multi1"</span>,<span class="string">"multi1"</span>);</span><br><span class="line">        maps.put(<span class="string">"multi2"</span>,<span class="string">"multi2"</span>);</span><br><span class="line">        maps.put(<span class="string">"multi3"</span>,<span class="string">"multi3"</span>);</span><br><span class="line">        redisTemplate.opsForValue().multiSet(maps);</span><br><span class="line">        List&lt;String&gt; keys = <span class="keyword">new</span> ArrayList&lt;String&gt;();</span><br><span class="line">        keys.add(<span class="string">"multi1"</span>);</span><br><span class="line">        keys.add(<span class="string">"multi2"</span>);</span><br><span class="line">        keys.add(<span class="string">"multi3"</span>);</span><br><span class="line">        System.out.println(redisTemplate.opsForValue().multiGet(keys));</span><br><span class="line">结果：[multi1, multi2, multi3]</span><br></pre></td></tr></table></figure><ul><li><p>redisTemplate.opsForValue().increment(K key, long delta)</p></li><li><p>redisTemplate.opsForValue().increment(K key, double delta)</p><p>原子递增</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().increment(key,<span class="number">1</span>)<span class="comment">//1</span></span><br><span class="line">redisTemplate.opsForValue().increment(key,<span class="number">1.2</span>) <span class="comment">//2.2</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>编号</th><th>命令</th><th>描述说明</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.yiibai.com/redis/strings_set.html" target="_blank" rel="noopener">SET key value</a></td><td>此命令设置指定键的值。</td></tr><tr><td>2</td><td><a href="http://www.yiibai.com/redis/strings_get.html" target="_blank" rel="noopener">GET key</a></td><td>获取指定键的值。</td></tr><tr><td>3</td><td><a href="http://www.yiibai.com/redis/strings_getrange.html" target="_blank" rel="noopener">GETRANGE key start end</a></td><td>获取存储在键上的字符串的子字符串。</td></tr><tr><td>4</td><td><a href="http://www.yiibai.com/redis/strings_getset.html" target="_blank" rel="noopener">GETSET key value</a></td><td>设置键的字符串值并返回其旧值。</td></tr><tr><td>5</td><td><a href="http://www.yiibai.com/redis/strings_getbit.html" target="_blank" rel="noopener">GETBIT key offset</a></td><td>返回在键处存储的字符串值中偏移处的位值。</td></tr><tr><td>6</td><td><a href="http://www.yiibai.com/redis/strings_mget.html" target="_blank" rel="noopener">MGET key1 [key2..]</a></td><td>获取所有给定键的值</td></tr><tr><td>7</td><td><a href="http://www.yiibai.com/redis/strings_setbit.html" target="_blank" rel="noopener">SETBIT key offset value</a></td><td>存储在键上的字符串值中设置或清除偏移处的位</td></tr><tr><td>8</td><td><a href="http://www.yiibai.com/redis/strings_setex.html" target="_blank" rel="noopener">SETEX key seconds value</a></td><td>使用键和到期时间来设置值</td></tr><tr><td>9</td><td><a href="http://www.yiibai.com/redis/strings_setnx.html" target="_blank" rel="noopener">SETNX key value</a></td><td>设置键的值，仅当键不存在时</td></tr><tr><td>10</td><td><a href="http://www.yiibai.com/redis/strings_setrange.html" target="_blank" rel="noopener">SETRANGE key offset value</a></td><td>在指定偏移处开始的键处覆盖字符串的一部分</td></tr><tr><td>11</td><td><a href="http://www.yiibai.com/redis/strings_strlen.html" target="_blank" rel="noopener">STRLEN key</a></td><td>获取存储在键中的值的长度</td></tr><tr><td>12</td><td><a href="http://www.yiibai.com/redis/strings_mset.html" target="_blank" rel="noopener">MSET key value [key value …]</a></td><td>为多个键分别设置它们的值</td></tr><tr><td>13</td><td><a href="http://www.yiibai.com/redis/strings_msetnx.html" target="_blank" rel="noopener">MSETNX key value [key value …]</a></td><td>为多个键分别设置它们的值，仅当键不存在时</td></tr><tr><td>14</td><td><a href="http://www.yiibai.com/redis/strings_psetex.html" target="_blank" rel="noopener">PSETEX key milliseconds value</a></td><td>设置键的值和到期时间(以毫秒为单位)</td></tr><tr><td>15</td><td><a href="http://www.yiibai.com/redis/strings_incr.html" target="_blank" rel="noopener">INCR key</a></td><td>将键的整数值增加<code>1</code></td></tr><tr><td>16</td><td><a href="http://www.yiibai.com/redis/strings_incrby.html" target="_blank" rel="noopener">INCRBY key increment</a></td><td>将键的整数值按给定的数值增加</td></tr><tr><td>17</td><td><a href="http://www.yiibai.com/redis/strings_incrbyfloat.html" target="_blank" rel="noopener">INCRBYFLOAT key increment</a></td><td>将键的浮点值按给定的数值增加</td></tr><tr><td>18</td><td><a href="http://www.yiibai.com/redis/strings_decr.html" target="_blank" rel="noopener">DECR key</a></td><td>将键的整数值减<code>1</code></td></tr><tr><td>19</td><td><a href="http://www.yiibai.com/redis/strings_decrby.html" target="_blank" rel="noopener">DECRBY key decrement</a></td><td>按给定数值减少键的整数值</td></tr><tr><td>20</td><td><a href="http://www.yiibai.com/redis/strings_append.html" target="_blank" rel="noopener">APPEND key value</a></td><td>将指定值附加到键</td></tr></tbody></table><h4 id="Hash"><a href="#Hash" class="headerlink" title="Hash"></a>Hash</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Hash:</span><br><span class="line"><span class="number">1</span>.redisTemplate.opsForHash().delete(H key, Object... hashKeys);<span class="comment">//...表示可以传入多个map的key，用，隔开。或用数组传值</span></span><br><span class="line"><span class="number">2</span>.redisTemplate.opsForHash().hasKey(key, hashKey)；</span><br><span class="line"><span class="number">3</span>.redisTemplate.opsForHash().get(key, hashKey)；</span><br><span class="line"><span class="number">4</span>.redisTemplate.opsForHash().entries(key);<span class="comment">//返回map集合</span></span><br><span class="line"><span class="number">5</span>、<span class="number">6</span>.redisTemplate.opsForHash().increment(H key, HK hashKey, <span class="keyword">long</span> delta);<span class="comment">//或increment(H key, HK hashKey, double delta);；</span></span><br><span class="line"><span class="number">7</span>.redisTemplate.opsForHash().keys(key)；<span class="comment">//返回map的key集合Set</span></span><br><span class="line"><span class="number">8</span>.redisTemplate.opsForHash().size(key)；</span><br><span class="line"><span class="number">9</span>.redisTemplate.opsForHash().multiGet(H key, Collection&lt;HK&gt; hashKeys);</span><br><span class="line"><span class="number">10</span>.redisTemplate.opsForHash().putAll(H key, Map&lt;? extends HK, ? extends HV&gt; m)；</span><br><span class="line"><span class="number">11</span>.redisTemplate.opsForHash().put(key, hashKey, value);</span><br><span class="line"><span class="number">12</span>.redisTemplate.opsForHash().putIfAbsent(key, hashKey, value)；</span><br><span class="line"><span class="number">13</span>.redisTemplate.opsForHash().values(key);<span class="comment">//返回map中的value集合List；</span></span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.yiibai.com/redis/hashes_hdel.html" target="_blank" rel="noopener">HDEL key field2 [field2]</a></td><td>删除一个或多个哈希字段。</td></tr><tr><td>2</td><td><a href="http://www.yiibai.com/redis/hashes_hexists.html" target="_blank" rel="noopener">HEXISTS key field</a></td><td>判断是否存在散列字段。</td></tr><tr><td>3</td><td><a href="http://www.yiibai.com/redis/hashes_hget.html" target="_blank" rel="noopener">HGET key field</a></td><td>获取存储在指定键的哈希字段的值。</td></tr><tr><td>4</td><td><a href="http://www.yiibai.com/redis/hashes_hgetall.html" target="_blank" rel="noopener">HGETALL key</a></td><td>获取存储在指定键的哈希中的所有字段和值</td></tr><tr><td>5</td><td><a href="http://www.yiibai.com/redis/hashes_hincrby.html" target="_blank" rel="noopener">HINCRBY key field increment</a></td><td>将哈希字段的整数值按给定数字增加</td></tr><tr><td>6</td><td><a href="http://www.yiibai.com/redis/hashes_hincrbyfloat.html" target="_blank" rel="noopener">HINCRBYFLOAT key field increment</a></td><td>将哈希字段的浮点值按给定数值增加</td></tr><tr><td>7</td><td><a href="http://www.yiibai.com/redis/hashes_hkeys.html" target="_blank" rel="noopener">HKEYS key</a></td><td>获取哈希中的所有字段</td></tr><tr><td>8</td><td><a href="http://www.yiibai.com/redis/hashes_hlen.html" target="_blank" rel="noopener">HLEN key</a></td><td>获取散列中的字段数量</td></tr><tr><td>9</td><td><a href="http://www.yiibai.com/redis/hashes_hmget.html" target="_blank" rel="noopener">HMGET key field1 [field2]</a></td><td>获取所有给定哈希字段的值</td></tr><tr><td>10</td><td><a href="http://www.yiibai.com/redis/hashes_hmset.html" target="_blank" rel="noopener">HMSET key field1 value1 [field2 value2 ]</a></td><td>为多个哈希字段分别设置它们的值</td></tr><tr><td>11</td><td><a href="http://www.yiibai.com/redis/hashes_hset.html" target="_blank" rel="noopener">HSET key field value</a></td><td>设置散列字段的字符串值</td></tr><tr><td>12</td><td><a href="http://www.yiibai.com/redis/hashes_hsetnx.html" target="_blank" rel="noopener">HSETNX key field value</a></td><td>仅当字段不存在时，才设置散列字段的值</td></tr><tr><td>13</td><td><a href="http://www.yiibai.com/redis/hashes_hvals.html" target="_blank" rel="noopener">HVALS key</a></td><td>获取哈希中的所有值</td></tr></tbody></table><h4 id="List"><a href="#List" class="headerlink" title="List"></a>List</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">List：</span><br><span class="line"></span><br><span class="line">redisTemplate.opsForList().leftPush(key, value);<span class="comment">//从左向右存压栈</span></span><br><span class="line">redisTemplate.opsForList().leftPop(key);<span class="comment">//从左出栈</span></span><br><span class="line">redisTemplate.opsForList().size(key);<span class="comment">//队/栈长</span></span><br><span class="line">redisTemplate.opsForList().range(key, start, end);<span class="comment">//范围检索,返回List</span></span><br><span class="line">redisTemplate.opsForList().remove(key, i, value);<span class="comment">//移除key中值为value的i个,返回删除的个数；如果没有这个元素则返回0 </span></span><br><span class="line">redisTemplate.opsForList().index(key, index);<span class="comment">//检索</span></span><br><span class="line">redisTemplate.opsForList().set(key, index, value);<span class="comment">//赋值</span></span><br><span class="line">redisTemplate.opsForList().trim(key, start, end);<span class="comment">//裁剪,void,删除除了[start,end]以外的所有元素  </span></span><br><span class="line">redisTemplate.opsForList().rightPopAndLeftPush(String sourceKey, String destinationKey);<span class="comment">//将源key的队列的右边的一个值删除，然后塞入目标key的队列的左边，返回这个值</span></span><br><span class="line">注意:要缓存的对象必须实现Serializable接口,因为 Spring 会将对象先序列化再存入 Redis,否则报异常nested exception is java.lang.IllegalArgumentException: DefaultSerializer <span class="keyword">requires</span> a Serializable……</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.yiibai.com/redis/lists_blpop.html" target="_blank" rel="noopener">BLPOP key1 [key2 ] timeout</a></td><td>删除并获取列表中的第一个元素，或阻塞，直到有一个元素可用</td></tr><tr><td>2</td><td><a href="http://www.yiibai.com/redis/lists_brpop.html" target="_blank" rel="noopener">BRPOP key1 [key2 ] timeout</a></td><td>删除并获取列表中的最后一个元素，或阻塞，直到有一个元素可用</td></tr><tr><td>3</td><td><a href="http://www.yiibai.com/redis/lists_brpoplpush.html" target="_blank" rel="noopener">BRPOPLPUSH source destination timeout</a></td><td>从列表中弹出值，将其推送到另一个列表并返回它; 或阻塞，直到一个可用</td></tr><tr><td>4</td><td><a href="http://www.yiibai.com/redis/lists_lindex.html" target="_blank" rel="noopener">LINDEX key index</a></td><td>通过其索引从列表获取元素</td></tr><tr><td>5</td><td><a href="http://www.yiibai.com/redis/lists_linsert.html" target="_blank" rel="noopener">LINSERT key BEFORE/AFTER pivot value</a></td><td>在列表中的另一个元素之前或之后插入元素</td></tr><tr><td>6</td><td><a href="http://www.yiibai.com/redis/lists_llen.html" target="_blank" rel="noopener">LLEN key</a></td><td>获取列表的长度</td></tr><tr><td>7</td><td><a href="http://www.yiibai.com/redis/lists_lpop.html" target="_blank" rel="noopener">LPOP key</a></td><td>删除并获取列表中的第一个元素</td></tr><tr><td>8</td><td><a href="http://www.yiibai.com/redis/lists_lpush.html" target="_blank" rel="noopener">LPUSH key value1 [value2]</a></td><td>将一个或多个值添加到列表</td></tr><tr><td>9</td><td><a href="http://www.yiibai.com/redis/lists_lpushx.html" target="_blank" rel="noopener">LPUSHX key value</a></td><td>仅当列表存在时，才向列表添加值</td></tr><tr><td>10</td><td><a href="http://www.yiibai.com/redis/lists_lrange.html" target="_blank" rel="noopener">LRANGE key start stop</a></td><td>从列表中获取一系列元素</td></tr><tr><td>11</td><td><a href="http://www.yiibai.com/redis/lists_lrem.html" target="_blank" rel="noopener">LREM key count value</a></td><td>从列表中删除元素</td></tr><tr><td>12</td><td><a href="http://www.yiibai.com/redis/lists_lset.html" target="_blank" rel="noopener">LSET key index value</a></td><td>通过索引在列表中设置元素的值</td></tr><tr><td>13</td><td><a href="http://www.yiibai.com/redis/lists_ltrim.html" target="_blank" rel="noopener">LTRIM key start stop</a></td><td>修剪列表的指定范围</td></tr><tr><td>14</td><td><a href="http://www.yiibai.com/redis/lists_rpop.html" target="_blank" rel="noopener">RPOP key</a></td><td>删除并获取列表中的最后一个元素</td></tr><tr><td>15</td><td><a href="http://www.yiibai.com/redis/lists_rpoplpush.html" target="_blank" rel="noopener">RPOPLPUSH source destination</a></td><td>删除列表中的最后一个元素，将其附加到另一个列表并返回</td></tr><tr><td>16</td><td><a href="http://www.yiibai.com/redis/lists_rpush.html" target="_blank" rel="noopener">RPUSH key value1 [value2]</a></td><td>将一个或多个值附加到列表</td></tr><tr><td>17</td><td><a href="http://www.yiibai.com/redis/lists_rpushx.html" target="_blank" rel="noopener">RPUSHX key value</a></td><td>仅当列表存在时才将值附加到列表</td></tr></tbody></table><h4 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">Set</span>：</span><br><span class="line">redisTemplate.opsForValue().getAndSet(<span class="keyword">key</span>, <span class="keyword">value</span>)</span><br></pre></td></tr></table></figure><table><thead><tr><th>序号</th><th>命令</th><th>说明</th></tr></thead><tbody><tr><td>1</td><td><a href="http://www.yiibai.com/redis/sets_sadd.html" target="_blank" rel="noopener">SADD key member1 [member2]</a></td><td>将一个或多个成员添加到集合</td></tr><tr><td>2</td><td><a href="http://www.yiibai.com/redis/sets_scard.html" target="_blank" rel="noopener">SCARD key</a></td><td>获取集合中的成员数</td></tr><tr><td>3</td><td><a href="http://www.yiibai.com/redis/sets_sdiff.html" target="_blank" rel="noopener">SDIFF key1 [key2]</a></td><td>减去多个集合</td></tr><tr><td>4</td><td><a href="http://www.yiibai.com/redis/sets_sdiffstore.html" target="_blank" rel="noopener">SDIFFSTORE destination key1 [key2]</a></td><td>减去多个集并将结果集存储在键中</td></tr><tr><td>5</td><td><a href="http://www.yiibai.com/redis/sets_sinter.html" target="_blank" rel="noopener">SINTER key1 [key2]</a></td><td>相交多个集合</td></tr><tr><td>6</td><td><a href="http://www.yiibai.com/redis/sets_sinterstore.html" target="_blank" rel="noopener">SINTERSTORE destination key1 [key2]</a></td><td>交叉多个集合并将结果集存储在键中</td></tr><tr><td>7</td><td><a href="http://www.yiibai.com/redis/sets_sismember.html" target="_blank" rel="noopener">SISMEMBER key member</a></td><td>判断确定给定值是否是集合的成员</td></tr><tr><td>8</td><td><a href="http://www.yiibai.com/redis/sets_smove.html" target="_blank" rel="noopener">SMOVE source destination member</a></td><td>将成员从一个集合移动到另一个集合</td></tr><tr><td>9</td><td><a href="http://www.yiibai.com/redis/sets_spop.html" target="_blank" rel="noopener">SPOP key</a></td><td>从集合中删除并返回随机成员</td></tr><tr><td>10</td><td><a href="http://www.yiibai.com/redis/sets_srandmember.html" target="_blank" rel="noopener">SRANDMEMBER key [count]</a></td><td>从集合中获取一个或多个随机成员</td></tr><tr><td>11</td><td><a href="http://www.yiibai.com/redis/sets_srem.html" target="_blank" rel="noopener">SREM key member1 [member2]</a></td><td>从集合中删除一个或多个成员</td></tr><tr><td>12</td><td><a href="http://www.yiibai.com/redis/sets_sunion.html" target="_blank" rel="noopener">SUNION key1 [key2]</a></td><td>添加多个集合</td></tr><tr><td>13</td><td><a href="http://www.yiibai.com/redis/sets_sunionstore.html" target="_blank" rel="noopener">SUNIONSTORE destination key1 [key2]</a></td><td>添加多个集并将结果集存储在键中</td></tr><tr><td>14</td><td><a href="http://www.yiibai.com/redis/sets_sscan.html" target="_blank" rel="noopener">SSCAN key cursor [MATCH pattern] [COUNT count]</a></td><td>递增地迭代集合中的元素</td></tr></tbody></table><h3 id="String…与String-的区别"><a href="#String…与String-的区别" class="headerlink" title="String…与String[]的区别"></a>String…与String[]的区别</h3><p>类型后面三个点(String…)，是从Java 5开始，Java语言对方法参数支持一种新写法，叫可变长度参数列表，其语法就是类型后跟 <strong>…</strong>，表示此处接受的参数为<strong>0到多个</strong>Object类型的对象，或者是一个Object[]。所以如果你有了xxx(String… strs)就不能再有xxx(String[])，三个点的写法包含了第二种。</p><h3 id="SpringBoot集成Activemq"><a href="#SpringBoot集成Activemq" class="headerlink" title="SpringBoot集成Activemq"></a>SpringBoot集成Activemq</h3><p>即JMS在Springboot中的应用</p><p>[<a href="https://blog.csdn.net/Ouyzc/article/details/79756574" target="_blank" rel="noopener">https://blog.csdn.net/Ouyzc/article/details/79756574</a></p><p>下面按照上面这个链接中的代码进行分析：</p><p><strong>生产者：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 1生产者发送消息(发送信息到队列)P2P</span></span><br><span class="line"><span class="comment"> * 根据实例化Destination目的地参数的类型的对象决定是点对点队列的形式，还是广播的形式</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">queueSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个目的地（队列类型）</span></span><br><span class="line">Destination queue = <span class="keyword">new</span> ActiveMQQueue(<span class="string">"mytest.queue"</span>);  </span><br><span class="line">jmsTemplate.convertAndSend(queue, <span class="string">"myname is Oyzc"</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 2生产者发送消息(发送信息到话题)Pub</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Scheduled</span>(fixedRate = <span class="number">5000</span>)</span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">topicSend</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//定义一个目的地（队列类型）</span></span><br><span class="line">Destination topic = <span class="keyword">new</span> ActiveMQTopic(<span class="string">"mytest.topic"</span>); </span><br><span class="line">jmsTemplate.convertAndSend(topic, <span class="string">"myname is Oyzc"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 3生产者发送出去消息之后，可以马上监听指定消费者的反馈信息</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> text</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="meta">@JmsListener</span>(destination=<span class="string">"out.queue"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">consumerMessage</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line">System.out.println(<span class="string">"从out.queue队列收到的回复报文为:"</span>+text);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者生产说明：</p><p>//P2P创建队列，参数为队列名</p><p>Destination queue = new ==ActiveMQQueue==(“mytest.queue”);</p><p>//Pub定义topic，参数为topic名称</p><p>Destination topic = new ==ActiveMQTopic==(“mytest.topic”); </p><p>//jms发送队列/话题信息，第一个参数为队列/topic，第二个参数为发送的内容，可以是字符串或实体或json</p><p>==jmsTemplate.convertAndSend(topic, “myname is Oyzc”);==</p><p><strong>消费者：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 使用JmsListener配置消费者监听的队列，其中text是接收到的消息</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 消费者接收信息1(接收队列为mytest.queue的信息，并马上回复信息到out.queue队列中)</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="comment">// 使用JmsListener配置消费者监听的队列，其中text是接收到的消息  </span></span><br><span class="line">    <span class="meta">@JmsListener</span>(destination = <span class="string">"mytest.queue"</span>) </span><br><span class="line"><span class="meta">@SendTo</span>(<span class="string">"out.queue"</span>)  </span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">receiveQueue1</span><span class="params">(String text)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">System.out.println(<span class="string">"消费者1收到目的地为mytest.queue发来的信息"</span>+text);</span><br><span class="line"></span><br><span class="line"><span class="keyword">return</span> <span class="string">"mytest.queue接收到你的信息了"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>消费者说明：</p><p>//@JmsListener开启监听，接受名为”mytest.queue”的队列/话题信息</p><p>@JmsListener(destination = “mytest.queue”) </p><p>//返回给生产者的队列</p><p>@SendTo(“out.queue”)  </p><p>在队列和话题同时存在的情况下，Jms默认支持队列，解决方式：</p><p>在配置文件中添加 <strong>spring.jms.pub-sub-domain=true</strong>，使得队列和话题同时发送成功，但消费者只接受topic。</p><p>正确解决方式：</p><p>① Jms配置类</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableJms</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">JmsFactoryConfig</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value</span>(<span class="string">"$&#123;activemq.ClientId&#125;"</span>)</span><br><span class="line">    <span class="keyword">private</span> String ClientId;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; topicListenerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory factory = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        <span class="comment">//订阅发布</span></span><br><span class="line">        factory.setPubSubDomain(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//消息持久化</span></span><br><span class="line">        factory.setSubscriptionDurable(<span class="keyword">true</span>);</span><br><span class="line">        <span class="comment">//链接超时</span></span><br><span class="line">        factory.setReceiveTimeout(<span class="number">1000L</span>);</span><br><span class="line">        <span class="comment">//接收者id</span></span><br><span class="line">        factory.setClientId(ClientId);</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> JmsListenerContainerFactory&lt;?&gt; queueListenerFactory(ConnectionFactory connectionFactory) &#123;</span><br><span class="line">        DefaultJmsListenerContainerFactory factory = <span class="keyword">new</span> DefaultJmsListenerContainerFactory();</span><br><span class="line">        <span class="comment">//队列</span></span><br><span class="line">        factory.setPubSubDomain(<span class="keyword">false</span>);</span><br><span class="line">        factory.setConnectionFactory(connectionFactory);</span><br><span class="line">        <span class="keyword">return</span> factory;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>修改消费者代码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JmsListener</span>(destination = <span class="string">"$&#123;activemq.topic&#125;"</span> , containerFactory = <span class="string">"topicListenerFactory"</span>)</span><br></pre></td></tr></table></figure><p>//使监听器处理话题/队列信息</p><p>containerFactory = “topicListenerFactory/queueListenerFactory”</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;安装与客户端的使用：&lt;a href=&quot;https://blog.csdn.net/qq_35038153/article/details/79675728&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://blog.csdn.net/qq_35
      
    
    </summary>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="redis" scheme="http://yoursite.com/tags/redis/"/>
    
  </entry>
  
  <entry>
    <title>ActiveMQ</title>
    <link href="http://yoursite.com/2018/11/04/ActiveMQ/"/>
    <id>http://yoursite.com/2018/11/04/ActiveMQ/</id>
    <published>2018-11-04T08:54:04.000Z</published>
    <updated>2018-11-04T09:07:25.940Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>休息了大概一个礼拜，到一个新的单位重新开始，大佬列了很多新人技术清单，其中有很多只是听说过但没有学习和接触过，得赶紧学习啦，^-^</p><p>另外最近使用的是来自大傻逼推荐的一个md编辑器Typora，非常好看还带大纲，比markdownPad好用很多</p></blockquote><p>Activemq学习来源：<a href="https://www.cnblogs.com/cyfonly/p/6380860.html" target="_blank" rel="noopener">https://www.cnblogs.com/cyfonly/p/6380860.html</a></p><p><a href="https://www.cnblogs.com/jaycekon/p/6225058.html" target="_blank" rel="noopener">https://www.cnblogs.com/jaycekon/p/6225058.html</a></p><p><a href="https://blog.csdn.net/Ouyzc/article/details/79643387" target="_blank" rel="noopener">https://blog.csdn.net/Ouyzc/article/details/79643387</a></p><p>首先了解我初步要学到的内容，理解JMS规范-理解点对点，发布订阅模式，理解生产者与消费者</p><p>ok，我的环境是win，没有在虚拟机里装，但一般用在Linux的好像比较多，来看看activemq是个什么东西吧：它是一个面向<strong>消息中间件</strong>（MOM Message-oriented middleware）【MOM 的总体思想是它作为消息发送器和消息接收器之间的消息中介,这种中介提供了一个全新水平的松耦合。】</p><p>JMS(Java Message Service)java消息服务</p><p>activemq就是JMS的一种体现，再了解消息的传递方式-<strong>包括点对点P2P和发布/订阅两种</strong>，nice 这似乎是我需要get的第一个知识点。</p><h4 id="P2P与Pub-Sub"><a href="#P2P与Pub-Sub" class="headerlink" title="P2P与Pub/Sub"></a>P2P与Pub/Sub</h4><p><strong>P2P</strong> （点对点）消息域使用 queue 作为 目标，消息可以被<strong>同步或异步</strong>的发送和接收，每个消息只会给一个 Consumer 传送一次。</p><p>Consumer 可以使用 MessageConsumer.receive() 同步地接收消息，也可以通过使用MessageConsumer.setMessageListener() 注册一个 MessageListener 实现异步接收。</p><p>多个 Consumer 可以注册到同一个 queue 上，但一个消息只能被一个 Consumer 所接收，然后由该 Consumer 来确认消息。并且在这种情况下，Provider 对所有注册的 Consumer 以<strong>轮询的方式</strong>发送消息。</p><p><strong>Pub/Sub</strong>（发布/订阅，Publish/Subscribe）消息域使用 topic 作为 Destination，发布者向 topic 发送消息，订阅者注册接收来自 topic 的消息。发送到 topic 的任何消息都将自动传递给所有订阅者。接收方式（同步和异步）与 P2P 域相同。<br>除非显式指定，否则 topic 不会为订阅者保留消息。当然，这可以通过持久化（Durable）订阅来实现消息的保存。这种情况下，当订阅者与 Provider 断开时，Provider 会为它存储消息。当持久化订阅者重新连接时，将会受到所有的断连期间未消费的消息。</p><h4 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h4><ul><li>获取连接工厂</li><li>使用连接工厂创建连接</li><li>启动连接</li><li>从连接创建会话</li><li>获取 Destination</li><li>创建 Producer，或<ul><li>创建 Producer</li><li>创建 message</li></ul></li><li>创建 Consumer，或发送或接收message发送或接收 message<ul><li>创建 Consumer</li><li>注册消息监听器（可选）</li></ul></li><li>发送或接收 message</li><li>关闭资源（connection, session, producer, consumer 等)</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--ActiveMQ所需要的jar包 --&gt;</span>  </span><br><span class="line">        <span class="comment">&lt;!-- 添加ActiveMQ的pool包 --&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-pool<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;<span class="name">dependency</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.activemq<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>activemq-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span>  </span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.15.3<span class="tag">&lt;/<span class="name">version</span>&gt;</span>  </span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p><strong>第一种P2P模式：</strong></p><p>①消息生产者给消息中间件（队列）发送消息</p><p>②消息消费者接收消息中间件（队列）的消息</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Producter</span> </span>&#123;</span><br><span class="line">    <span class="comment">//activamq默认用户名 密码和地址，获取连接的三个必要参数</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BORKEN_URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//Atomic原子类型，保证该int一时间只被单线程操作</span></span><br><span class="line">    AtomicInteger count = <span class="keyword">new</span> AtomicInteger(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">//获取连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory;</span><br><span class="line">    <span class="comment">//创建连接对象</span></span><br><span class="line">    Connection connection;</span><br><span class="line">    <span class="comment">//事务管理</span></span><br><span class="line">    Session session;</span><br><span class="line"></span><br><span class="line">    ThreadLocal&lt;MessageProducer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;MessageProducer&gt;();</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(USERNAME,PASSWORD,BORKEN_URL);</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            session = connection.createSession(<span class="keyword">true</span>,Session.SESSION_TRANSACTED);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sendMessage</span><span class="params">(String disname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//获取消息队列</span></span><br><span class="line">            Queue queue =  session.createQueue(disname);</span><br><span class="line">            MessageProducer messageProducer = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span> (threadLocal.get() !=<span class="keyword">null</span>)&#123;</span><br><span class="line">                <span class="comment">//若不为空则从线程中获取，若为空则用session创建</span></span><br><span class="line">                messageProducer = threadLocal.get();</span><br><span class="line">                <span class="comment">//消息过期设置</span></span><br><span class="line">                <span class="comment">//messageProducer.setTimeToLive(1000);</span></span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                messageProducer = session.createProducer(queue);</span><br><span class="line">                threadLocal.set(messageProducer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//开始创建消息</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="keyword">true</span>)&#123;</span><br><span class="line">                Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                <span class="keyword">int</span> num = count.getAndIncrement();</span><br><span class="line">                TextMessage textMessage = session.createTextMessage(Thread.currentThread().getName()+<span class="string">"我正在生产消息,num"</span>+num);</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">"我正在生产消息,num"</span>+num);</span><br><span class="line">                <span class="comment">//发送消息</span></span><br><span class="line">                messageProducer.send(textMessage);</span><br><span class="line">                <span class="comment">//提交事务</span></span><br><span class="line">                session.commit();</span><br><span class="line">                <span class="keyword">if</span> (num&gt;<span class="number">5</span>)&#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">"消息发送结束"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activemq</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试Activemq</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WYuyin</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-01 15:45</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestMq</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Producter producter = <span class="keyword">new</span> Producter();</span><br><span class="line">        producter.init();</span><br><span class="line">        TestMq testMq = <span class="keyword">new</span> TestMq();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//Thread 1</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testMq.new ProductorMq(producter)).start();</span><br><span class="line">        <span class="comment">//Thread 2</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testMq.new ProductorMq(producter)).start();</span><br><span class="line">        <span class="comment">//Thread 3</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testMq.new ProductorMq(producter)).start();</span><br><span class="line">        <span class="comment">//Thread 4</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testMq.new ProductorMq(producter)).start();</span><br><span class="line">        <span class="comment">//Thread 5</span></span><br><span class="line">        <span class="keyword">new</span> Thread(testMq.new ProductorMq(producter)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ProductorMq</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        Producter producter;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ProductorMq</span><span class="params">(Producter producter)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.producter = producter;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    producter.sendMessage(<span class="string">"Jaycekon-MQ"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnection;</span><br><span class="line"><span class="keyword">import</span> org.apache.activemq.ActiveMQConnectionFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.jms.*;</span><br><span class="line"><span class="keyword">import</span> java.util.concurrent.atomic.AtomicInteger;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activemq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WYuyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-01 16:29</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Comsumer</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String USERNAME = ActiveMQConnection.DEFAULT_USER;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String PASSWORD = ActiveMQConnection.DEFAULT_PASSWORD;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> String BORKEN_URL = ActiveMQConnection.DEFAULT_BROKER_URL;</span><br><span class="line">    <span class="comment">//获取连接工厂</span></span><br><span class="line">    ConnectionFactory connectionFactory;</span><br><span class="line">    <span class="comment">//创建连接对象</span></span><br><span class="line">    Connection connection;</span><br><span class="line">    <span class="comment">//事务管理</span></span><br><span class="line">    Session session;</span><br><span class="line"></span><br><span class="line">    ThreadLocal&lt;MessageConsumer&gt; threadLocal = <span class="keyword">new</span> ThreadLocal&lt;MessageConsumer&gt;();</span><br><span class="line">    AtomicInteger count = <span class="keyword">new</span> AtomicInteger();</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">init</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            connectionFactory = <span class="keyword">new</span> ActiveMQConnectionFactory(USERNAME,PASSWORD,BORKEN_URL);</span><br><span class="line">            connection = connectionFactory.createConnection();</span><br><span class="line">            connection.start();</span><br><span class="line">            session = connection.createSession(<span class="keyword">true</span>,Session.SESSION_TRANSACTED);</span><br><span class="line">        &#125;<span class="keyword">catch</span> (Exception e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span>  <span class="title">getMessage</span><span class="params">(String disname)</span></span>&#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            Queue queue = session.createQueue(disname);</span><br><span class="line">            MessageConsumer consumer = <span class="keyword">null</span>;</span><br><span class="line">            <span class="keyword">if</span>(threadLocal.get()!=<span class="keyword">null</span>)&#123;</span><br><span class="line">                consumer = threadLocal.get();</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                consumer = session.createConsumer(queue);</span><br><span class="line">                threadLocal.set(consumer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">                TextMessage msg = (TextMessage) consumer.receive();</span><br><span class="line">                <span class="keyword">if</span>(msg!=<span class="keyword">null</span>) &#123;</span><br><span class="line">                    msg.acknowledge();</span><br><span class="line">                    System.out.println(Thread.currentThread().getName()+<span class="string">": Consumer:我是消费者，我正在消费Msg"</span>+msg.getText()+<span class="string">"---&gt;"</span>+count.getAndIncrement());</span><br><span class="line">                &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (JMSException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@program</span>: activemq</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>: 测试Mq消费者</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span>: WYuyin</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@create</span>: 2018-11-01 16:44</span></span><br><span class="line"><span class="comment"> **/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">TestCustomer</span> </span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">        Comsumer comsumer = <span class="keyword">new</span> Comsumer();</span><br><span class="line">        comsumer.init();</span><br><span class="line">        TestCustomer testCustomer = <span class="keyword">new</span> TestCustomer();</span><br><span class="line">        <span class="keyword">new</span> Thread(testCustomer.new ConsumerMq(comsumer)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testCustomer.new ConsumerMq(comsumer)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testCustomer.new ConsumerMq(comsumer)).start();</span><br><span class="line">        <span class="keyword">new</span> Thread(testCustomer.new ConsumerMq(comsumer)).start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerMq</span> <span class="keyword">implements</span> <span class="title">Runnable</span></span>&#123;</span><br><span class="line">        Comsumer comsumer;</span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="title">ConsumerMq</span><span class="params">(Comsumer comsumer)</span></span>&#123;</span><br><span class="line">            <span class="keyword">this</span>.comsumer = comsumer;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">run</span><span class="params">()</span> </span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    comsumer.getMessage(<span class="string">"Jaycekon-MQ"</span>);</span><br><span class="line">                    Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>第二种Pub/Sub模式</strong></p><p>①消息生产者（发布者）给消息中间件发送话题（topic）</p><p>②消息消费者（订阅者）接收消息中间件的发送话题</p><p>消息生产者（发布者）代码与第一种P2P模式的消息生产者代码几乎一样，只是在创建生产者时，创建的是话题并不是队列</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 获取session注意参数值mytopic是一个服务器的topic，须在在ActiveMq的console配置  </span></span><br><span class="line">topic = session.createTopic(<span class="string">"mytopic"</span>);  </span><br><span class="line"><span class="comment">// 得到消息生成者【发送者】  </span></span><br><span class="line">producer = session.createProducer(topic);</span><br><span class="line"><span class="comment">//......</span></span><br><span class="line">TextMessage message = session.createTextMessage(<span class="string">"我给你发话题"</span>);  </span><br><span class="line">System.out.println(<span class="string">"Sender发送消息："</span> + <span class="string">"topic:"</span> + i);  </span><br><span class="line">producer.send(message);</span><br></pre></td></tr></table></figure><p>订阅者：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">session = connection.createSession(Boolean.FALSE,Session.AUTO_ACKNOWLEDGE);  </span><br><span class="line"><span class="comment">// 获取session注意参数值mytopic是一个服务器的topic，须在在ActiveMq的console配置  </span></span><br><span class="line">destination = session.createTopic(<span class="string">"mytopic"</span>);  </span><br><span class="line">consumer = session.createConsumer(destination);</span><br></pre></td></tr></table></figure><h4 id="什么情况下使用ActiveMQ"><a href="#什么情况下使用ActiveMQ" class="headerlink" title="什么情况下使用ActiveMQ?"></a>什么情况下使用ActiveMQ?</h4><ol><li>多个项目之间集成<br>(1) 跨平台<br>(2) 多语言<br>(3) 多项目</li><li>降低系统间模块的耦合度，解耦<br>(1) 软件扩展性</li><li>系统前后端隔离<br>(1) 前后端隔离，屏蔽高安全区</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;休息了大概一个礼拜，到一个新的单位重新开始，大佬列了很多新人技术清单，其中有很多只是听说过但没有学习和接触过，得赶紧学习啦，^-^&lt;/p&gt;
&lt;p&gt;另外最近使用的是来自大傻逼推荐的一个md编辑器Typora，非常好看还带大纲，比markdownPad
      
    
    </summary>
    
    
      <category term="activemq" scheme="http://yoursite.com/tags/activemq/"/>
    
  </entry>
  
  <entry>
    <title>Spring Boot(一)</title>
    <link href="http://yoursite.com/2018/10/22/Spring-Boot-%E4%B8%80/"/>
    <id>http://yoursite.com/2018/10/22/Spring-Boot-一/</id>
    <published>2018-10-22T01:54:18.000Z</published>
    <updated>2018-11-04T09:41:03.924Z</updated>
    
    <content type="html"><![CDATA[<h2 id="SpringBootApplication"><a href="#SpringBootApplication" class="headerlink" title="@SpringBootApplication"></a>@SpringBootApplication</h2><p>上一节写HelloWorldDemo时主程序类被修饰了一个<strong>@SpringBootApplication</strong>，【顾名思义-SpringBoot应用注解】标注在某各类上说明这个类是SpringBoot的主配置类，SpringBoot就应该运行这个类的main方法来启动SpringBoot应用，是一个组合注解。</p><p>这个组合注解中包含Spring里的<strong>@Configuration</strong>、<strong>@Import、@EnableAutoConfiguration、@ComponentScan</strong>等底层注解，之前也说SpringBoot有自动配置的优点，那么只要你在主程序配置了<strong>@SpringBootApplication</strong>，其所在包及其中子包里所有的组件都扫描到Spring容器，这是其中的<strong>@AutoConfigurationPackage</strong>【自动配置包】的作用</p><h2 id="RestController"><a href="#RestController" class="headerlink" title="@RestController"></a>@RestController</h2><p><strong>@RestController</strong>标注在Controller类上，也是一个组合注解，主要包含<strong>@Controller</strong>和<strong>@ResponseBody</strong></p><p>@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中,页面不会发生跳转。</p><h2 id="配置文件"><a href="#配置文件" class="headerlink" title="配置文件"></a>配置文件</h2><p>新建Spring Initializer项目时会生成一个application.properties，除了这个properties文件还支持yml格式的配置文件，两者的书写格式有所不同，yml更加的清爽适合用来作为配置文件。</p><p>在建博客的时候遇到的配置文件都是yml类型，所以已经有些熟悉。</p><h3 id="值的格式"><a href="#值的格式" class="headerlink" title="值的格式"></a>值的格式</h3><p>k: v    //k和v之间一定要有空格</p><p><strong>普通的值：数字，字符串，布尔</strong><br>字符串不用加引号，但如果字符串中含有空格或特殊字符，要用单引号括起来，否则会被转义。<br>布尔类型：用on、1、true来表示true，off、0、false来表示false</p><p><strong>对象、Map、数组</strong><br>对象的值就在下一行写对象的属性值，注意缩进。</p><pre><code>friends:     lastName: zhangsan    age: 20</code></pre><p>行内写法：【也是Map的写法】</p><pre><code>frends: {lastName: zhangsan,age: 20}</code></pre><p>数组：用”- “隔开</p><pre><code>pets: - cat - dog</code></pre><p>数组的行内写法：<br>​<br>    pets: [dog,cat]</p><h2 id="ConfigurationProperties"><a href="#ConfigurationProperties" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h2><p>在配置文件中写好值后，如何获取参数？</p><h3 id="ConfigurationProperties-1"><a href="#ConfigurationProperties-1" class="headerlink" title="@ConfigurationProperties"></a>@ConfigurationProperties</h3><p>最常见的方法有将对象以映射的方式，将配置信息封装成一个类，创建一个class，在类上修饰：<strong>@Component</strong> 和 <strong>@ConfigurationProperties(prefix=”xxx”)</strong>,前者是将类变成一个JavaBean，后者表示前缀为xxx的配置信息被绑定</p><p>我们可以导入<strong>配置文件处理器</strong>，写配置文件时会有相应包下bean的自动提示：</p><pre><code>&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-configuration-processor&lt;/artifactId&gt;    &lt;optional&gt;true&lt;/optional&gt;&lt;/dependency&gt;</code></pre><p>JavaBean：</p><pre><code>@Component@ConfigurationProperties(prefix = &quot;person&quot;)public class Person {    private String name;    private Integer age;    private List&lt;Object&gt; list;</code></pre><p>yml配置文件：</p><pre><code>person:  age: 20  name: Zhangsan  list:     - miao    - wang</code></pre><p>如果是properties文件要将文件编码改为ASCII码，否则会出现乱码，设置步骤为：Settings-File Encodings-√Transparent native-to-ascii conversion</p><h2 id="Value"><a href="#Value" class="headerlink" title="@Value"></a>@Value</h2><p>同Spring一样@Value(“${xxx}”)</p><p>其中引号中可以用EL表达式表示#{xxx}</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;SpringBootApplication&quot;&gt;&lt;a href=&quot;#SpringBootApplication&quot; class=&quot;headerlink&quot; title=&quot;@SpringBootApplication&quot;&gt;&lt;/a&gt;@SpringBootApplication
      
    
    </summary>
    
      <category term="spring boot" scheme="http://yoursite.com/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="java ee" scheme="http://yoursite.com/tags/java-ee/"/>
    
  </entry>
  
  <entry>
    <title>被IE支配的恐惧</title>
    <link href="http://yoursite.com/2018/10/18/%E8%A2%ABIE%E6%94%AF%E9%85%8D%E7%9A%84%E6%81%90%E6%83%A7/"/>
    <id>http://yoursite.com/2018/10/18/被IE支配的恐惧/</id>
    <published>2018-10-18T02:44:02.000Z</published>
    <updated>2018-10-18T06:43:22.080Z</updated>
    
    <content type="html"><![CDATA[<p> 这两天改前端，平时习惯拿谷歌和opera调试，今天突然想到有个表格的宽没定好，有点丑，就打开几个浏览器一同看效果，然后就被IE整崩溃了，总是出现 属性“xxx”的值为 null、未定义或不是 Function 对象这个错，简单的一个onclick=”xxx()”都没有效果。</p><p>首先，我的js代码绝对没问题，因为其他浏览器正常都没问题，而且就算清除方法内容单单写一个alert也还是报一样的错。后来我改了方法名，重新刷新，刷新一下之后短暂地不报错并且成功走了我的js代码，但一切换或刷新又报错，一开始我以为是ie8的问题，切换调试工具为ie11发现的确ie11不报错，但也没有走我的方法，只是它没找到方法直接跳转到下一页面并且没有告诉你它没找到，真的是太草率了一点吧这个IE？？？</p><p>花了半天时间解决了这个问题，总结归纳如下几步：</p><p>1)确保js代码无误，方法名没有写错，或是方法里有什么语法错误。</p><p>2)判断问题是出在IE8兼容上还是IE的通病，通过F12右上角一个下拉选项可以切换调试版本，默认是8，这也是最蛋疼的一点。<br><img src="/2018/10/18/被IE支配的恐惧/20180831_1.png"></p><p>3)若是ie8独有的问题，那么就自行百度如何处理吧，如果是所有版本都存在的问题，或是像我一样时灵时不灵的情况，这是浏览器缓存导致的，js代码修改过但是浏览器只加载最初的js，这个靠刷新是没有效果的，</p><p><strong>清缓存步骤</strong>：设置-Internet选项-常规-删除，就会跳出删除浏览历史记录的窗口，把下载历史记录、表单数据都勾上，确认删除，等待几秒后就会弹出“Internet Explorer已完成删除所选的浏览历史记录”，这时再刷新就一切恢复正常了。</p><blockquote><p>后续：经过反复清缓存又重跑代码，最终觉得还是有代码本身的问题，页面上的表单用s标签提交，而我却欲用ajax，并把事件触发在submit上，感觉可能是冲突了，【我不信！那为啥什么也不写只有一句alert还是会报错@-@，还是要靠清缓存】，总之这个问题第二天在我放弃了ajax提交之后就悄悄地解决了，也没有发生昨天的情况，程序员的谎言：“我真的没有改代码！”orz</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt; 这两天改前端，平时习惯拿谷歌和opera调试，今天突然想到有个表格的宽没定好，有点丑，就打开几个浏览器一同看效果，然后就被IE整崩溃了，总是出现 属性“xxx”的值为 null、未定义或不是 Function 对象这个错，简单的一个onclick=”xxx()”都没有效果
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>spring boot入门</title>
    <link href="http://yoursite.com/2018/10/12/spring-boot%E5%85%A5%E9%97%A8/"/>
    <id>http://yoursite.com/2018/10/12/spring-boot入门/</id>
    <published>2018-10-12T02:22:06.000Z</published>
    <updated>2018-10-22T05:56:16.221Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>虽然工作用不到springboot，甚至没有用到spring，但这也就是为什么我有了强烈的危机感，现在许多地方应该会用到吧，或许标题应该是从零开始学springboot。跟着尚硅谷的springboot视频学习，如有侵权请留言或发<a href="9005837@qq.com">邮箱</a>告诉我</p></blockquote><p>spring boot是用于简化spring开发的框架，是基于spring再封装的一个框架<br>优点：</p><ul><li>快速创建独立运行的Spring项目以及与主流框架集成</li><li>使用嵌入式的Servlet容器，应用无需打成WAR包</li><li>starters自动依赖与版本控制</li><li>大量的自动配置，简化开发，也可修改默认值</li><li>无需配置XML，无代码生成，开箱即用</li><li>准生产环境的运行时应用监控</li><li>与云计算的天然集成<br>这里的无需配置配置文件，和starters自动依赖真的是很吸引人，想想用spring的时候从各种配置开始学真的有些繁琐。</li></ul><h2 id="环境约束"><a href="#环境约束" class="headerlink" title="环境约束"></a>环境约束</h2><ul><li>jdk1.8</li><li>maven3.x</li><li>IDEA2018</li><li>SpringBoot1.5.9</li></ul><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>1.在apache-maven-3.3.9\conf\settings.xml中检查：</p><pre><code>&lt;profiles&gt;  &lt;profile&gt;            &lt;id&gt;jdk18&lt;/id&gt;            &lt;activation&gt;                &lt;activeByDefault&gt;true&lt;/activeByDefault&gt;                &lt;jdk&gt;1.8&lt;/jdk&gt;            &lt;/activation&gt;            &lt;properties&gt;                &lt;maven.compiler.source&gt;1.8&lt;/maven.compiler.source&gt;                &lt;maven.compiler.target&gt;1.8&lt;/maven.compiler.target&gt;                &lt;maven.compiler.compilerVersion&gt;1.8&lt;/maven.compiler.compilerVersion&gt;            &lt;/properties&gt;         &lt;/profile&gt;  </code></pre><p>2.将IDEA的Maven环境修改为当前1.8版本，IDEA自带Maven<br><img src="/2018/10/12/spring-boot入门/20181012145508.png"></p><h2 id="HelloWorldDemo"><a href="#HelloWorldDemo" class="headerlink" title="HelloWorldDemo"></a>HelloWorldDemo</h2><p>流程：浏览器发送请求，服务器接收后处理并响应HelloWorld</p><ol><li><p>创建一个Maven工程<br>(也可以创建一个SpringInitializr工程，下面会讲到)<br><img src="/2018/10/12/spring-boot入门/20181012150010.png"><br>右下角会出现一个AutoImport<br><img src="/2018/10/12/spring-boot入门/20181012151419.png"><br>如果你和我一样很不幸的点了×但是又不想重来一遍,那么就在settings中设置Maven-importing<br><img src="/2018/10/12/spring-boot入门/20181012151700.png"><br>这个设置呢就意味着IDEA会自动帮我们导入依赖</p></li><li><p>导入依赖，在pom.xml中加入：</p><pre><code>   &lt;parent&gt;&lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;&lt;artifactId&gt;spring-boot-starter-parent&lt;/artifactId&gt;&lt;version&gt;1.5.9.RELEASE&lt;/version&gt;&lt;/parent&gt;&lt;dependencies&gt;&lt;dependency&gt;    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;    &lt;artifactId&gt;spring-boot-starter-web&lt;/artifactId&gt;&lt;/dependency&gt;&lt;/dependencies&gt;</code></pre></li></ol><p>就可以看到右下角在自动下载jar包</p><ol start="3"><li><p>写HelloWorld，在main里新建一个HelloWorld的class</p><pre><code>import org.springframework.boot.SpringApplication;import org.springframework.boot.autoconfigure.SpringBootApplication;/*@SpringBootApplication 来标注一个主程序类，说明这是一个Spring Boot应用 */@SpringBootApplicationpublic class HelloWorld {public static void main(String[] args){SpringApplication.run(HelloWorld.class,args);}}</code></pre></li><li><p>编写相关的Controller</p><pre><code>@Controllerpublic class HelloWorldController {@ResponseBody@RequestMapping(&quot;/hello&quot;)public String hello(){return &quot;Hello World&quot;;}}</code></pre></li></ol><blockquote><p>补习：@ResponseBody是作用在方法上的，@ResponseBody 表示该方法的返回结果直接写入 HTTP response body 中，一般在异步获取数据时使用【也就是AJAX】，在使用 @RequestMapping后，返回值通常解析为跳转路径，但是加上 @ResponseBody 后返回结果不会被解析为跳转路径，而是直接写入 HTTP response body 中。 比如异步获取 json 数据，加上 @ResponseBody 后，会直接返回 json 数据。@RequestBody 将 HTTP 请求正文插入方法中，使用适合的 HttpMessageConverter 将请求体写入某个对象。<a href="https://www.cnblogs.com/daimajun/p/7152970.html" target="_blank" rel="noopener">来源</a></p></blockquote><ol start="5"><li>运行main方法<br><img src="/2018/10/12/spring-boot入门/20181012160811.png"></li></ol><blockquote><p>可以看到整个过程是非常简单的，也就只有注入依赖、写主程序和控制器就没了，回顾一下springMVC应用的流程，配置bean 创建Ioc容器 在程序中获取bean实例 还有SpringMVC的ModelAndView，（虽然我SpringMVC只是学了个大概，没有实践过），SpringBoot的出现一定是为了我这样的懒人减少配置的步骤才出现的吧</p></blockquote><ol start="6"><li><p>打包，加一个插件就可以做到</p> <!-- 这个插件可以将应用打包成一个可执行的jar包 --><pre><code>&lt;build&gt;    &lt;plugins&gt;        &lt;plugin&gt;            &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;            &lt;artifactId&gt;spring-boot-maven-plugin&lt;/artifactId&gt;        &lt;/plugin&gt;    &lt;/plugins&gt;&lt;/build&gt;</code></pre></li></ol><p>无需再目标服务器安装tomcat环境,接着在右侧看到Maven Projects点开，点package让他装<br><img src="/2018/10/12/spring-boot入门/20181012162729.png"><br>打包好的jar包存在于target文件夹下<br><img src="/2018/10/12/spring-boot入门/20181012163051.png"><br>用cmd执行<code>java -jar jar包名称</code>就可以一样把应用跑起来，这就是SpringBoot对部署带来的便捷</p><h2 id="quickDemo"><a href="#quickDemo" class="headerlink" title="quickDemo"></a>quickDemo</h2><p>可使用Spring Initializer快速创建SpringBoot项目</p><p>IDE都支持使用Spring快速创建向导来开启一个SpringBoot项目</p><p>步骤：<strong>New- Project- Spring Initializer</strong><br>在Dependencies下选择你要的依赖，然后向导会自动联网帮你配好这些依赖<img src="/2018/10/12/spring-boot入门/20181022111750.png">把不要的东西去掉。</p><p>新建完成后会发现主程序已经帮你创好了，接下来只要写逻辑就可以了。</p><p>Controller中的一个注解<strong>@RestController</strong>包含@Controller和@ResponseBody，ResponseBody在上面已经回顾过。标注在Controller上代表这是一个Controller类。</p><pre><code>@RestControllerpublic class HelloController {@RequestMapping(&quot;/hello2&quot;)public String hello(){return &quot;quick hello&quot;;}}</code></pre><p>这下一个quickDemo就完成了，不仅比原先少写主配置文件和依赖，自动生成的目录结构也将静态资源和配置文件生成好了</p><pre><code>-main---java------com.quickdemo.demo---------DemoApplication---resources------static    这个放静态资源------templates    这个保存所有的模态页面------application.properties    配置文件</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;虽然工作用不到springboot，甚至没有用到spring，但这也就是为什么我有了强烈的危机感，现在许多地方应该会用到吧，或许标题应该是从零开始学springboot。跟着尚硅谷的springboot视频学习，如有侵权请留言或发&lt;a href=&quot;
      
    
    </summary>
    
      <category term="spring boot" scheme="http://yoursite.com/categories/spring-boot/"/>
    
    
      <category term="spring boot" scheme="http://yoursite.com/tags/spring-boot/"/>
    
      <category term="java ee" scheme="http://yoursite.com/tags/java-ee/"/>
    
  </entry>
  
  <entry>
    <title>Java面试题汇总</title>
    <link href="http://yoursite.com/2018/10/11/Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%B1%87%E6%80%BB/"/>
    <id>http://yoursite.com/2018/10/11/Java面试题汇总/</id>
    <published>2018-10-11T03:23:53.000Z</published>
    <updated>2018-10-11T09:12:38.359Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>有可能不全是Java的知识，只是时间一长感觉这些知识会忘了，就把我遇到的和我了解的先列列看吧。其中会出现许多来自百度、知乎、CSDN等处的内容，就不一一列出来了。</p></blockquote><h2 id="Java"><a href="#Java" class="headerlink" title="Java"></a>Java</h2><h3 id="面向对象"><a href="#面向对象" class="headerlink" title="面向对象"></a>面向对象</h3><h4 id="private、protected、public、default的区别"><a href="#private、protected、public、default的区别" class="headerlink" title="private、protected、public、default的区别"></a>private、protected、public、default的区别</h4><p><img src="https://images2015.cnblogs.com/blog/690292/201609/690292-20160923095944481-1758567758.png"></p><p>private 的访问权限仅限于类的内部，是一种封装的体现，大多数成员变量都是private的，使它不能被任何外部的类访问。</p><p>不写时默认为default，即同一包内、类内。</p><h4 id="封装、继承、多态、抽象"><a href="#封装、继承、多态、抽象" class="headerlink" title="封装、继承、多态、抽象"></a>封装、继承、多态、抽象</h4><p>众所周知的面向对象的特征。</p><p>封装：把对象的属性、方法结合成一个独立的整体，这也就是模块化的思想</p><p>继承：一个类可以继承(extends) 父类，就变成了他的子类，继承了父类所有的非私有的方法与属性，哪些内容会被继承见上面的图，继承的方法一般可以重写，继承与重载的权限如下图所示</p><p><img src="https://pic1.zhimg.com/80/v2-a836e010f9e147509844b79529f5a176_hd.jpg"></p><p>多态：不同的对象对同一消息做出不一样的响应，采取不同的方法。最直观的例子就是一个实体类可以有多个构造方法。</p><p>抽象：有相同特性的类抽象出共同的部分，用abstract修饰，抽象类的意义可以用三句话来概括：1.为其它子类提供一个公共的类型 2.封装子类中重复定义的内容 3.定义统一抽象方法，</p><p>抽象方法没有方法体。</p><h4 id="抽象类与接口的区别"><a href="#抽象类与接口的区别" class="headerlink" title="抽象类与接口的区别"></a>抽象类与接口的区别</h4><p>抽象和接口通常被放在一起比较</p><p><strong>实现方式</strong>：抽象类用extends继承，接口用implements，需要提供接口中所有声明的实现。</p><p><strong>是否可以被实例化</strong>：抽象类不可以，接口则是完全不同的类型，接口不是类，更不能被实例化</p><p><strong>构造器：</strong>抽象类中可以有构造器，接口不能</p><p><strong>修饰符：</strong>抽象方法可以有public、protected、default修饰，接口默认为public，不能被其他修饰符修饰</p><p><strong>是否可以多继承</strong>：抽象类有传递性质，但只能继承一个父类，却可以同时实现多个接口</p><p><strong>构造方法</strong>：接口没有构造方法</p><p>接口的意义在于规范，扩展，回调</p><h4 id="Overload和Override的区别"><a href="#Overload和Override的区别" class="headerlink" title="Overload和Override的区别"></a>Overload和Override的区别</h4><p>重写Override，子类覆盖父类的方法，将子类传与父类的引用调用的还是子类的方法。<br>重载Overloading，一个类多个方法，名称相同，参数个数类型不同，返回值的类型也可不同。<br>两者都是Java多态性的不同表现。</p><h4 id="Final有什么作用"><a href="#Final有什么作用" class="headerlink" title="Final有什么作用"></a>Final有什么作用</h4><p>修饰的属性为常量<br>修饰的方法不可以重写<br>修饰的类不可以继承</p><h4 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h4><p>this()和super()的意义</p><p>什么是不可变对象</p><p>Object有哪些公共方法？（equals(),clone(),getClass(),notify(),notifyAll(),wait(),toString()）</p><h3 id="Java基础"><a href="#Java基础" class="headerlink" title="Java基础"></a>Java基础</h3><h4 id="ArrayList和Vector的区别"><a href="#ArrayList和Vector的区别" class="headerlink" title="ArrayList和Vector的区别"></a>ArrayList和Vector的区别</h4><p>ArrayList:线程不安全，速度快<br>Vector:线程安全，速度慢(synchoronized)<br>两者都实现了List接口，都是有序的集合，允许重复和null</p><p>LikedList: 以单链表的方式存储，增、删快，查、改慢</p><h4 id="HashMap和Hashtable的区别"><a href="#HashMap和Hashtable的区别" class="headerlink" title="HashMap和Hashtable的区别"></a>HashMap和Hashtable的区别</h4><p>HashMap与Hashtable都实现的Map接口,HashTable线程安全，HashMap线程不安全。</p><h4 id="Collection-和-Collections的区别"><a href="#Collection-和-Collections的区别" class="headerlink" title="Collection 和 Collections的区别"></a>Collection 和 Collections的区别</h4><p>Collection是集合的根接口，其下有set（无序）及list（有序）<br>Collections是集合的算法。</p><p>Map不继承于Collection，是无序的键值对的集合，不允许重复</p><h4 id="Enumeration和Iterator接口的区别"><a href="#Enumeration和Iterator接口的区别" class="headerlink" title="Enumeration和Iterator接口的区别"></a>Enumeration和Iterator接口的区别</h4><p>Enumeration比Iterator更加安全，因为当一个集合正在被遍历的时候，它会阻止其它线程去修改集合。</p><p>Iterator能够删除元素，Enumeration不能。</p><h4 id="ArrayList集合加入1万条数据，应该怎么提高效率"><a href="#ArrayList集合加入1万条数据，应该怎么提高效率" class="headerlink" title="ArrayList集合加入1万条数据，应该怎么提高效率"></a>ArrayList集合加入1万条数据，应该怎么提高效率</h4><p>ArrayList的默认初始容量为10，要插入大量数据的时候需要不断扩容，而扩容是非常影响性能的。因此，现在明确了10万条数据了，我们可以直接在初始化的时候就设置ArrayList的容量！</p><h4 id="HashMap的key值要是为类对象则该类需要满足什么条件？"><a href="#HashMap的key值要是为类对象则该类需要满足什么条件？" class="headerlink" title="HashMap的key值要是为类对象则该类需要满足什么条件？"></a>HashMap的key值要是为类对象则该类需要满足什么条件？</h4><p>转载自<a href="https://segmentfault.com/a/1190000014403696#articleHeader11" target="_blank" rel="noopener">这里</a></p><p>需同时重写该类的hashCode()方法和它的equals()方法。</p><p>一般来说，我们会认为：只要两个对象的成员变量的值是相等的，那么我们就认为这两个对象是相等的！因为，Object底层比较的是两个对象的地址，而对我们开发来说这样的意义并不大~这也就为什么我们要重写equals()方法</p><p>重写了equals()方法，就要重写hashCode()的方法。因为equals()认定了这两个对象相同，而同一个对象调用hashCode()方法时，是应该返回相同的值的</p><h4 id="与equals"><a href="#与equals" class="headerlink" title="== 与equals"></a>== 与equals</h4><p>==：主要用于基本数据类型（byte、int、char、long、float、double、boolean和short）及引用<br>equals()：用于对象及引用，（String一般用equals）</p><h2 id="DB"><a href="#DB" class="headerlink" title="DB"></a>DB</h2><h3 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h3><h4 id="事务的概念"><a href="#事务的概念" class="headerlink" title="事务的概念"></a>事务的概念</h4><p>事务是是并发控制单位，要么全部做要么劝都不做。如果你自己不去控制事务，数据库默认一条sql语句就处在自己单独的事务当中。以BEGIN TRANSACTION开始，以COMMIT或ROLLBACK结束。</p><h4 id="事务的特性"><a href="#事务的特性" class="headerlink" title="事务的特性"></a>事务的特性</h4><p>（呃啊这需要理解到位，第一次面试遇到过的题目）<br><strong>原子性、一致性、隔离性、持久性</strong><br>链接：<a href="https://blog.csdn.net/leprovision/article/details/81021675" target="_blank" rel="noopener">什么是事务,事务的四个特性是什么</a><br>⑴ 原子性（Atomicity）<br>　　原子性是指事务包含的所有操作要么全部成功，要么全部失败回滚，这和前面两篇博客介绍事务的功能是一样的概念，因此事务的操作如果成功就必须要完全应用到数据库，如果操作失败则不能对数据库有任何影响。</p><p>⑵ 一致性（Consistency）<br>　　一致性是指事务必须使数据库从一个一致性状态变换到另一个一致性状态，也就是说一个事务执行之前和执行之后都必须处于一致性状态。</p><p>　　拿转账来说，假设用户A和用户B两者的钱加起来一共是5000，那么不管A和B之间如何转账，转几次账，事务结束后两个用户的钱相加起来应该还得是5000，这就是事务的一致性。</p><p>⑶ 隔离性（Isolation）</p><p>　　隔离性是当多个用户并发访问数据库时，比如操作同一张表时，数据库为每一个用户开启的事务，不能被其他事务的操作所干扰，多个并发事务之间要相互隔离。</p><p>　　即要达到这么一种效果：对于任意两个并发的事务T1和T2，在事务T1看来，T2要么在T1开始之前就已经结束，要么在T1结束之后才开始，这样每个事务都感觉不到有其他事务在并发地执行。</p><p>　　关于事务的隔离性数据库提供了多种隔离级别，稍后会介绍到。</p><p>⑷ 持久性（Durability）</p><p>　　持久性是指一个事务一旦被提交了，那么对数据库中的数据的改变就是永久性的，即便是在数据库系统遇到故障的情况下也不会丢失提交事务的操作。</p><p>　　例如我们在使用JDBC操作数据库时，在提交事务方法后，提示用户事务操作完成，当我们程序执行完成直到看到提示后，就可以认定事务以及正确提交，即使这时候数据库出现了问题，也必须要将我们的事务完全执行完成，否则就会造成我们看到提示事务处理完毕，但是数据库因为故障而没有执行事务的重大错误。</p><p>　　以上介绍完事务的四大特性(简称ACID)，现在重点来说明下事务的隔离性，当多个线程都开启事务操作数据库中的数据时，数据库系统要能进行隔离操作，以保证各个线程获取数据的准确性，在介绍数据库提供的各种隔离级别之前，我们先看看如果不考虑事务的隔离性，会发生的几种问题：</p><p>1，脏读</p><p>　　脏读是指在一个事务处理过程里读取了另一个未提交的事务中的数据。</p><p>　　当一个事务正在多次修改某个数据，而在这个事务中这多次的修改都还未提交，这时一个并发的事务来访问该数据，就会造成两个事务得到的数据不一致。例如：用户A向用户B转账100元，对应SQL命令如下</p><p>update account set money=money+100 where name=’B’; (此时A通知B) update account set money=money - 100 where name=’A’;</p><p>　　当只执行第一条SQL时，A通知B查看账户，B发现确实钱已到账（此时即发生了脏读），而之后无论第二条SQL是否执行，只要该事务不提交，则所有操作都将回滚，那么当B以后再次查看账户时就会发现钱其实并没有转。</p><p>2，不可重复读</p><p>　　不可重复读是指在对于数据库中的某个数据，一个事务范围内多次查询却返回了不同的数据值，这是由于在查询间隔，被另一个事务修改并提交了。</p><p>　　例如事务T1在读取某一数据，而事务T2立马修改了这个数据并且提交事务给数据库，事务T1再次读取该数据就得到了不同的结果，发送了不可重复读。</p><p>　　不可重复读和脏读的区别是，脏读是某一事务读取了另一个事务未提交的脏数据，而不可重复读则是读取了前一事务提交的数据。</p><p>　　在某些情况下，不可重复读并不是问题，比如我们多次查询某个数据当然以最后查询得到的结果为主。但在另一些情况下就有可能发生问题，例如对于同一个数据A和B依次查询就可能不同，A和B就可能打起来了……</p><p>3，虚读(幻读)</p><p>　　幻读是事务非独立执行时发生的一种现象。例如事务T1对一个表中所有的行的某个数据项做了从“1”修改为“2”的操作，这时事务T2又对这个表中插入了一行数据项，而这个数据项的数值还是为“1”并且提交给数据库。而操作事务T1的用户如果再查看刚刚修改的数据，会发现还有一行没有修改，其实这行是从事务T2中添加的，就好像产生幻觉一样，这就是发生了幻读。</p><p>　　幻读和不可重复读都是读取了另一条已经提交的事务（这点就脏读不同），所不同的是不可重复读查询的都是同一个数据项，而幻读针对的是一批数据整体（比如数据的个数）。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;有可能不全是Java的知识，只是时间一长感觉这些知识会忘了，就把我遇到的和我了解的先列列看吧。其中会出现许多来自百度、知乎、CSDN等处的内容，就不一一列出来了。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Java&quot;&gt;&lt;a href=&quot;#
      
    
    </summary>
    
    
      <category term="Java" scheme="http://yoursite.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>获取指定行所在的列</title>
    <link href="http://yoursite.com/2018/10/10/%E8%8E%B7%E5%8F%96%E6%8C%87%E5%AE%9A%E8%A1%8C%E6%89%80%E5%9C%A8%E7%9A%84%E5%88%97/"/>
    <id>http://yoursite.com/2018/10/10/获取指定行所在的列/</id>
    <published>2018-10-10T07:27:02.000Z</published>
    <updated>2018-10-10T08:39:10.305Z</updated>
    
    <content type="html"><![CDATA[<p>每次前端的问题都能把我整好久，看来当时网页这门课没学好，今天遇到的问题是不知道如何获取table下某一列的所有数值，校验后并对它所在的行的其他兄弟节点进行操作。</p><p>html：</p><pre><code>&lt;table class=&quot;datatbl&quot;&gt;    &lt;thead&gt;        &lt;tr&gt;            &lt;td&gt;xxx&lt;/td&gt;            &lt;td&gt;xxx&lt;/td&gt;        &lt;/tr&gt;    &lt;/thead&gt;    &lt;tbody&gt;        &lt;s:iterator value=&quot;list&quot;&gt;            &lt;td class=&quot;a&quot;&gt;&lt;s:property value=&quot;a&quot;/&gt;&lt;/td&gt;            &lt;td class=&quot;compareFlag&quot;&gt;&lt;s:property value=&quot;b&quot;/&gt;&lt;/td&gt;        &lt;/s:iterator&gt;    &lt;/tbody&gt;&lt;/table&gt;</code></pre><p>思路：为了操作步骤方便，我直接将要获取的那一列加上class，本来想从table一步步往下找，但是不知道怎么.childern不太会用，索性直接根据class找所有的元素。</p><pre><code>$(&quot;.compareFkStatus&quot;).each(function(){    console.log($(this).html());});</code></pre><p>然后获取此td所在的tr，也就是其父节点</p><pre><code>$(&quot;.compareFkStatus&quot;).each(function(){    console.log($(this).html());    var parent = $(this).parent();    var a = parent.find(&quot;[class=&apos;a&apos;]&quot;).html();    console.log(&quot;a:&quot;+a);});</code></pre><p>这里parent就是所在列，a就是所在列。</p><p>总结一下，也就是子元素与父元素的获取</p><pre><code>$(子元素).parent() #获取父元素$(父元素).children(selector) #获取子元素$(xxx).find(&quot;[class=&apos;a&apos;]&quot;)    #与上面相似，此处的意思为xxx下的class为a的元素</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;每次前端的问题都能把我整好久，看来当时网页这门课没学好，今天遇到的问题是不知道如何获取table下某一列的所有数值，校验后并对它所在的行的其他兄弟节点进行操作。&lt;/p&gt;
&lt;p&gt;html：&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;&amp;lt;table class=&amp;quot;datatb
      
    
    </summary>
    
    
      <category term="js" scheme="http://yoursite.com/tags/js/"/>
    
  </entry>
  
  <entry>
    <title>搭建博客步骤</title>
    <link href="http://yoursite.com/2018/10/10/%E6%90%AD%E5%BB%BA%E5%8D%9A%E5%AE%A2%E6%AD%A5%E9%AA%A4/"/>
    <id>http://yoursite.com/2018/10/10/搭建博客步骤/</id>
    <published>2018-10-10T01:42:31.000Z</published>
    <updated>2018-11-04T09:23:44.549Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>写在前面，这其实不是我第一次搭博客，之前尝试过一次但是兴致冲冲地找了很多教程做到后来发现hexo装的就有些问题，并不是网上的教程不详细，但是东看西看容易出错，这里重头再来一遍，把之前的坑都补上</p></blockquote><h3 id="安装Nexo"><a href="#安装Nexo" class="headerlink" title="安装Nexo"></a>安装Nexo</h3><p>前提：安装好了node.js和git</p><p>1)新建一个空的文件夹，用于存放你的项目，在其中打开Git Bash</p><p>2)依次执行以下命令：<br>​<br>    npm install hexo-cli -g<br>    hexo init blog<br>    cd blog<br>    npm install<br>    hexo server</p><p>其中第一步可能会等的久一点，耐心等待。</p><p>3)浏览器打开4000端口，可以在本地看到原始的hexo博客，ctrl+c关闭，每次想预览可以再输入 <code>hexo server (hexo s)</code></p><p>如果4000端口占用，可用<code>hexo server -p 其他端口号</code>，也可以找方法把4000端口的服务关掉</p><p>这一步有问题一定要解决，hexo运行正常才是搭一个githubio的前提</p><h3 id="部署到GitHub-Pages"><a href="#部署到GitHub-Pages" class="headerlink" title="部署到GitHub Pages"></a>部署到GitHub Pages</h3><p>1) 在GitHub新建一个仓库，Repository name必须得是 <strong>账户名.github.io</strong> </p><p>这时你已经可以访问 <a href="https://xxx.github.io/了" target="_blank" rel="noopener">https://xxx.github.io/了</a></p><p>2) 回到你的blog文件夹下，执行：<br>​<br>    $ git config –global user.name “yourname”<br>    $ git config –global user.name “<a href="mailto:youremail@xx.com" target="_blank" rel="noopener">youremail@xx.com</a>“</p><p>3) 找到_config.yml，在最后找到下面的内容并修改：<br>​<br>    deploy:<br>    type: git<br>    repository: <a href="https://github.com/WYuyin/WYuyin.github.io.git" target="_blank" rel="noopener">https://github.com/WYuyin/WYuyin.github.io.git</a><br>    branch: master</p><p>4) 执行命令 <code>hexo d -g</code> 就可完成部署</p><p>等待一会会让你输入GitHub用户名和密码，再访问<a href="http://xxx.github.io就可以看到你的主页" target="_blank" rel="noopener">http://xxx.github.io就可以看到你的主页</a></p><blockquote><p>这里 搭建和部署是两个命令，第一次部署需要用hexo g，安装完插件后每次要提交只需hexo d即可，如果出错可以hexo clean + hexo d -g</p></blockquote><h3 id="使用NexT"><a href="#使用NexT" class="headerlink" title="使用NexT"></a>使用NexT</h3><p>1) 安装</p><pre><code>git clone https://github.com/iissnan/hexo-theme-next themes/next</code></pre><p>2) 启用，修改_config.yml:<br>​<br>    theme: next</p><p>3) 开启服务后再访问你的主页就可以看到NexT了</p><pre><code>$ hexo clean &amp;&amp; hexo g &amp;&amp; hexo d -g$ hexo g &amp;&amp; hexo s   #如需本地预览，执行这一条</code></pre><p>提交了后并不是立马刷新的，稍微等十几秒钟才能更新</p><h3 id="优化"><a href="#优化" class="headerlink" title="优化"></a>优化</h3><p>这里根据个人喜好装饰博客，我之前其实已经做完了这些工作，一些配置就直接复制的之前的配置文件，这里区分两个配置文件，一个是安装hexo时生成的，还有一个是next主题中的，位置blog\themes\next_config.yml，修改样式主要在这两个中，另外如果想修改NexT的css样式，直接添加进\blog\themes\next\source\css_custom\custom.styl<br>​<br>样式的修改参考了<a href="https://reuixiy.github.io/technology/computer/computer-aided-art/2017/06/09/hexo-next-optimization.html" target="_blank" rel="noopener">大佬的博客</a></p><p>下面就一些我遇到的坑记录解决方法</p><h4 id="字数与阅读时长"><a href="#字数与阅读时长" class="headerlink" title="字数与阅读时长"></a>字数与阅读时长</h4><p>链接：<a href="https://www.jianshu.com/p/baea8c95e39b" target="_blank" rel="noopener">Hexo添加字数统计、阅读时长</a></p><h4 id="代码块高亮颜色"><a href="#代码块高亮颜色" class="headerlink" title="代码块高亮颜色"></a>代码块高亮颜色</h4><p>在配置文件中找到：</p><p>highlight_theme: normal，注释显示有五种显示主题可用，分别是：</p><ul><li>normal</li><li>night</li><li>night eighties</li><li>night blue</li><li>night bright</li></ul><h4 id="创建分类与标签"><a href="#创建分类与标签" class="headerlink" title="创建分类与标签"></a>创建分类与标签</h4><p>链接：<a href="https://blog.csdn.net/ganzhilin520/article/details/79047249" target="_blank" rel="noopener">hexo设置 关于 标签 分类 归档</a></p><h4 id="博客icon更替"><a href="#博客icon更替" class="headerlink" title="博客icon更替"></a>博客icon更替</h4><p>1) 找一个尽量长宽比相等的小图标，什么图片格式都可以</p><p>2) 百度，在线将你的图片转成ico格式</p><p>3) 将图标放在 blog\themes\next\source\images 文件夹下</p><p><img src="/2018/10/10/搭建博客步骤/20181010112351.png"></p><p>4) 修改 blog\themes\next_config.yml</p><p><img src="/2018/10/10/搭建博客步骤/20181010112817.png"></p><h4 id="在博客中添加图片"><a href="#在博客中添加图片" class="headerlink" title="在博客中添加图片"></a>在博客中添加图片</h4><p>链接：<a href="https://blog.csdn.net/sugar_rainbow/article/details/57415705" target="_blank" rel="noopener">hexo生成博文插入图片</a></p><p>之前我用的是一种比较笨的方法，每次上传到github然后再添加打开，但是github加载的速度大家也知道，相当的慢，经常出不来，于是找到了这个hexo的插件：<code>npm install hexo-asset-image --save</code></p><p>当生成一个新的博客时会多出一个同名的文件夹，将图片放进去然后用<code>&lt;img src=&quot;xxxx/图片名.png&quot;&gt;</code>就可以实现了，当然，如果你想贴的是网上现成的图，直接写网址就ok</p><h4 id="首页不显示全文"><a href="#首页不显示全文" class="headerlink" title="首页不显示全文"></a>首页不显示全文</h4><p>在配置文件中找到 auto_excerpt ，并修改：</p><pre><code>auto_excerpt:  enable: true    #这里修改为true  length: 150</code></pre><h4 id="评论与其他"><a href="#评论与其他" class="headerlink" title="评论与其他"></a>评论与其他</h4><p>上面收集的是一些我开博客遇到的问题，另外有一些样式上的问题比较简单。评论我用了<a href="https://livere.com/introduce" target="_blank" rel="noopener">来必力</a>，网上有很多其他的第三方评论平台都已经停了，所以只能暂时用这个，还算方便快捷。</p><p>这里就告一段落啦，如果有问题欢迎留言讨论，不过我也还是一个小菜鸡呀</p><hr><p>10.18日更新</p><h4 id="置顶"><a href="#置顶" class="headerlink" title="置顶"></a>置顶</h4><pre><code>$ npm uninstall hexo-generator-index --save$ npm install hexo-generator-index-pin-top --save</code></pre><p>然后在文章顶部+<code>top: true</code>就可以啦。另外还找到一个方法是改js，设置top的优先级，还未试过，这边给出<a href="https://www.jianshu.com/p/42a4efcdf8d7" target="_blank" rel="noopener">链接</a></p><h4 id="菜单点击出现的小图案"><a href="#菜单点击出现的小图案" class="headerlink" title="菜单点击出现的小图案"></a>菜单点击出现的小图案</h4><p>总的来说看上去还是一个标标准准的Next风格，其实想变得与众不同一些我在一些小细节上还是做了很多改动的！比如这个点击菜单出现的喵喵图案，改起来其实并不难。<br>第一步，找一个背景透明，缩小看也不失真的图片，我是用ps调整的图片大小，【用画图工具的话好像会留白】，调整大小为30px*30px<br>第二步，将图片放在blog\themes\next\source\images目录下，和改icon的目录一致<br>第三步，修改\blog\themes\next\source\css_custom\custom.styl文件，添加：</p><pre><code>//菜单.menu-item-active a:after {    width: 30px;    height: 30px;    background: url(&quot;../images/miao2.png&quot;);    margin-top: -12px;//调整好位置}</code></pre><p>第四步，预览并调试图片的位置，上面的margintop是我调整后觉得合适的边距，主题不一样可能位置有偏差，用浏览器的开发者工具调整到一个最佳的角度就ok，效果：<img src="/2018/10/10/搭建博客步骤/20181018145958.png"></p><h4 id="加速博客浏览速度"><a href="#加速博客浏览速度" class="headerlink" title="加速博客浏览速度"></a>加速博客浏览速度</h4><p>找到一个好的博客真的是很难得，<a href="https://blog.csdn.net/linshuhe1/article/details/71170499" target="_blank" rel="noopener">河乐不为的CSDN</a>，<strong>重点！重点</strong>这里的操作完全和文中的一样，且没有遇到坑，惊喜</p><ul><li>注册Coding.net账号：<br>打开<a href="https://coding.net/" target="_blank" rel="noopener">Coding.net官网</a>，注册一个个人账号</li><li>新建项目<br>注意项目名与注册用的账户名一致，这里我用的是WYuyin：</li><li>添加公钥<br>上面设置完毕之后点击创建项目，然后点击设置-&gt;部署公钥-&gt;新建部署公钥，之前部署到Github上的时候，本地目录 C\User(中文为用户)(电脑用户名).ssh 目录下会有 github.rsa.pub 公钥文件，打开然后复制里面的内容，直接贴在这里的公钥框中：<br><img src="/2018/10/10/搭建博客步骤/20181018151019.png"><br><img src="/2018/10/10/搭建博客步骤/20181018151145.png"><blockquote><p>记得要勾选 授予推送权限 ，否则在后面运行hexo d时会提示错误：<br>  Coding.net Tips : [Deploy key is not allowed to push!]<br>  fatal: Could not read from remote repository.<br>原因就是没有推送权限。</p></blockquote></li></ul><p>打开Git命令窗口，输入以下指令：</p><pre><code>ssh -T git@git.coding.NET</code></pre><p>假如出现以下输出结果，表示公钥绑定成功：</p><pre><code>The authenticity of host &apos;git.coding.net (118.25.166.124)&apos; can&apos;t be established.RSA key fingerprint is SHA256:jok3FH7q5LJ6qvE7iPNehBgXRw51ErE77S0Dn+Vg/Ik.Are you sure you want to continue connecting (yes/no)? yPlease type &apos;yes&apos; or &apos;no&apos;: yesWarning: Permanently added &apos;git.coding.net,118.25.166.124&apos; (RSA) to the list of known hosts.Coding 提示: Hello WYuyin, You&apos;ve connected to Coding.net via SSH. This is a deploy key.WYuyin，你好，你已经通过 SSH 协议认证 Coding.net 服务，这是一个部署公钥</code></pre><ul><li><p>修改hexo配置<br>打开hexo本地的配置文件 _config.yml，修改 deploy 的配置内容，这里设置了运行hexo d之后部署的目的地址，原本只有Github地址，现在添加多Coding.net的地址，其中WYuyin是注册该平台的 用户名：</p><pre><code>deploy:  type: git  repository: github: https://github.com/WYuyin/WYuyin.github.io.gitcoding: git@git.coding.net:WYuyin/WYuyin.git,master  branch: master</code></pre></li><li><p>正式部署到Coding.net：<br>打开命令行窗口，定位到当前hexo项目的根目录下，运行以下指令将本地博客部署到Github和Coding.net上：</p><pre><code>hexo g  hexo d</code></pre></li><li><p>设置Coding Page：<br><img src="/2018/10/10/搭建博客步骤/20181018152156.png"><br>设置成功后是这个样子<br><img src="/2018/10/10/搭建博客步骤/20181018152406.png"></p></li></ul><p>然后访问<a href="http://wyuyin.coding.me/" target="_blank" rel="noopener">http://wyuyin.coding.me/</a>就可以啦，无需等待立马就可以见到效果,访问的速度比之前快了一倍，另外我也对next的js做了一些调整，这里参考<a href="https://blog.csdn.net/Domino_b/article/details/81704118" target="_blank" rel="noopener">Soul_wwb的CSDN</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;写在前面，这其实不是我第一次搭博客，之前尝试过一次但是兴致冲冲地找了很多教程做到后来发现hexo装的就有些问题，并不是网上的教程不详细，但是东看西看容易出错，这里重头再来一遍，把之前的坑都补上&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h3 id=&quot;安
      
    
    </summary>
    
    
      <category term="博客" scheme="http://yoursite.com/tags/%E5%8D%9A%E5%AE%A2/"/>
    
  </entry>
  
</feed>
